#+TITLE: Emacs Configuration
#+AUTHOR: Alex Recker
#+STARTUP: showall

[[file:screenshots/scratch.png]]

It's been said "there are many ways to skin a cat".  The same can be
said of Emacs.  Probably.

* Personal

Don't be shy - introduce yourself to emacs.  If you are copying this
config, make sure you use your name.  We don't want to confuse my
mother.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Alex Recker"
        user-mail-address "alex@reckerfamily.com")
#+END_SRC

* Packages

All packages are installed with the [[https://github.com/jwiegley/use-package][use-package]] library.  Sadly, this
needs to load before org can tangle anything, so all the action is in
[[file:init.el][init.el]].

* Startup

** Path

Ensure that the system =PATH= is the one used by emacs.

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config (exec-path-from-shell-initialize))
#+END_SRC

** Scratch

The slash screen displayed on startup is a little too noisy for
me. The =*scratch*= buffer is a lot more low key.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message 't)
#+END_SRC

With this function, we can randomize the =*scratch*= message eachs
time using the output of a program.

#+BEGIN_SRC emacs-lisp
  (defun recker/get-startup-scratch ()
    (with-temp-buffer
      (lisp-mode)
      (insert (shell-command-to-string recker/scratch-message-program))
      (comment-region (point-max) (point-min))
      (buffer-string)))
#+END_SRC

I like to use my very own [[https://pypi.python.org/pypi/wilfred-say][wilfred-say]], but the classic =fortune= is a
good candidate as well.

#+BEGIN_SRC emacs-lisp
  (setq recker/scratch-message-program "wilfred-say")
  (setq initial-scratch-message (recker/get-startup-scratch))
#+END_SRC

Make the =*scratch*= buffer unkillable.

#+BEGIN_SRC emacs-lisp
  (use-package unkillable-scratch
    :ensure t
    :init (unkillable-scratch))
#+END_SRC

** Server

Start the emacs server if it is not running.

#+BEGIN_SRC emacs-lisp
  (require 'server)
  (unless (server-running-p)
    (server-start))
#+END_SRC

This allows you to connect to the emacs process from somewhere else -
like a terminal session.

* Interface

** Better Defaults

Emacs comes with some obnixious defaults.  "Not on my watch!", yelled
Alex as he disabled them.

#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil
        auto-save-default nil
        indent-tabs-mode nil
        ns-confirm-quit 1)

  (global-auto-revert-mode 1)
  (menu-bar-mode 0)
  (scroll-bar-mode 0)
  (tool-bar-mode 0)
  (delete-selection-mode t)
#+END_SRC

** Better Comments

I overwrite the build-in =comment-dwim= with its superior sequel.

#+BEGIN_SRC emacs-lisp
  (use-package comment-dwim-2
    :ensure t
    :bind ("M-;" . comment-dwim-2))
#+END_SRC

** Better Modeline

Hide all minor modes from the modeline (since there are usually like a
hundred).

#+BEGIN_SRC emacs-lisp
  (use-package rich-minority
    :ensure t
    :init (rich-minority-mode 1)
    :config (setq rm-blacklist ""))
#+END_SRC

** Better Bookmarks

Automatically save the bookmark file each time it is modified.  This
prevents losing bookmarks created in separate emacs clients.

#+BEGIN_SRC emacs-lisp
  (setq bookmark-save-flag 1
	bookmark-default-file (expand-file-name "~/docs/bookmarks.el"))
#+END_SRC

This is just a custom implementation of =bookmark-jump= that displays
file paths instead of just the "name".

#+BEGIN_SRC emacs-lisp
  (defun recker/bookmark-jump ()
    (interactive)
    (let ((bookmark-list
	   (mapcar (lambda (b) (cdr (assoc 'filename b)))
		   (read (with-temp-buffer
			   (insert-file-contents-literally bookmark-default-file)
			   (buffer-string))))))
      (find-file (completing-read "Jump to Bookmark: " bookmark-list nil t))))

  (global-set-key (kbd "C-x r b") 'recker/bookmark-jump)
#+END_SRC


** Better File Manager

By default, hide dot files.  They can be shown by disabling
=dired-omit-mode= with =C-x M-o=.

Another nice side effect of =dired-x= is suddenly gaining the ability
of jumping to the current file in dired with =C-x C-j=.

#+BEGIN_SRC emacs-lisp
  (require 'dired-x)
  (setq-default dired-omit-files-p t)
  (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))
#+END_SRC

Add the =-h= switch to the dired output to show prettier filenames.

#+BEGIN_SRC emacs-lisp
  (setq dired-listing-switches "-alh")
#+END_SRC

** Better Music

OK, so there's no music in Emacs to begin with.  But check out mingus,
it's pretty awesome.  This works, assuming you have an local mpd
server running on the default port.

#+BEGIN_SRC emacs-lisp
  (use-package mingus
    :ensure t
    :bind (("C-x m" . mingus)))
#+END_SRC

** Better Text Selection

I use =expand-region= to incrementally grab larger portions of text
based on where the cursor is. It’s a brilliant tool.

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))
#+END_SRC

** Better Completion

Company mode.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config (global-company-mode))
#+END_SRC

Yasnippet - I don't use this nearly as much as I should be.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init (yas-global-mode 1))
#+END_SRC

Completion and filtering with ivy, supported by counsel.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :config (setq ivy-use-selectable-prompt t)
    :init (ivy-mode 1))

  (use-package counsel
    :ensure t
    :bind
    ("C-c i" . counsel-imenu)
    ("C-c s" . swiper)
    ("C-c g" . counsel-git-grep)
    ("C-x C-y" . counsel-yank-pop))
#+END_SRC

** Better Git

Magit.  Seriously.  Just try it you heathen.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind
    ("C-x g" . magit-status)
    ("C-c m" . magit-blame)
    :config (magit-add-section-hook 'magit-status-sections-hook
                                  'magit-insert-unpushed-to-upstream
                                  'magit-insert-unpushed-to-upstream-or-recent
                                  'replace))
#+END_SRC

* Modes

These are the settings for various editing modes - the top level being
=text-mode=, which is for "editing text written for humans to read".

#+BEGIN_SRC emacs-lisp
  (defun recker/text-mode-hook ()
    (auto-fill-mode 1)
    (flyspell-mode 1)
    (flymake-mode-off))
  (add-hook 'text-mode-hook 'recker/text-mode-hook)
#+END_SRC

Flycheck mode.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode))
#+END_SRC

Globally cleanup white space on save.

#+BEGIN_SRC emacs-lisp
  (use-package whitespace-cleanup-mode
    :ensure t
    :config (global-whitespace-cleanup-mode))
#+END_SRC

Support for [[http://editorconfig.org/][editorconfig]].

#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :ensure t
    :config (editorconfig-mode 1))
#+END_SRC

** C

Taken from [[https://www.kernel.org/doc/html/v4.10/process/coding-style.html#you-ve-made-a-mess-of-it][The Linux Kernel Coding Style]], which was a way better read
than you'd think.

I slightly modified the provided snippet so that all of my C would
obey these rules by default.

#+BEGIN_SRC emacs-lisp
  (defun c-lineup-arglist-tabs-only (ignored)
    "Line up argument lists by tabs, not spaces"
    (let* ((anchor (c-langelem-pos c-syntactic-element))
           (column (c-langelem-2nd-pos c-syntactic-element))
           (offset (- (1+ column) anchor))
           (steps (floor offset c-basic-offset)))
      (* (max steps 1)
         c-basic-offset)))

  (add-hook 'c-mode-common-hook
            (lambda ()
              ;; Add kernel style
              (c-add-style
               "linux-tabs-only"
               '("linux" (c-offsets-alist
                          (arglist-cont-nonempty
                           c-lineup-gcc-asm-reg
                           c-lineup-arglist-tabs-only))))))

  (add-hook 'c-mode-hook (lambda ()
                           (setq indent-tabs-mode t)
                           (setq show-trailing-whitespace t)
                           (c-set-style "linux-tabs-only")))
#+END_SRC

** Clojure

#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t)

  (use-package clojure-mode
    :ensure t)
#+END_SRC

#+RESULTS:


** Commmon Lisp

For this to work, sbcl should be installed and in =PATH=.

#+BEGIN_SRC emacs-lisp
  (use-package slime
    :ensure t
    :config (setq inferior-lisp-program (executable-find "sbcl")))

  (use-package slime-company
    :ensure t
    :init (slime-setup '(slime-fancy slime-company)))
#+END_SRC

** Csv

#+BEGIN_SRC emacs-lisp
  (use-package csv-mode
    :ensure t
    :mode "\\.csv\\'")
#+END_SRC

** D

#+BEGIN_SRC emacs-lisp
  (use-package d-mode
    :ensure t
    :mode "\\.d\\'")
#+END_SRC

** Dockerfile

#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t
    :mode "\\Dockerfile\\'")
#+END_SRC


** Elisp

Disable those silly docstring warnings when editing elisp.

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'flycheck
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
#+END_SRC

** Go

Here is the /really/ trendy part of my config.

#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t
    :mode "\\*.go\\'")
#+END_SRC

** Groovy

Pretty much just for Jenkins files.

#+BEGIN_SRC emacs-lisp
  (use-package groovy-mode
    :ensure t
    :mode "\\Jenkinsfile\\'")
#+END_SRC

** Haskell

#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :mode "\\.hs\\'")
#+END_SRC

** HTML

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode ("\\.html\\'" "\\.jinja\\'")
    :config (setq web-mode-markup-indent-offset 2
                  web-mode-code-indent-offset 2))

  (use-package emmet-mode
    :ensure t
    :config (add-hook 'web-mode-hook 'emmet-mode))
#+END_SRC

** JavaScript

This is the web-scale portion of my config.

#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)
#+END_SRC

** Log

Taken from [[https://writequit.org/articles/working-with-logs-in-emacs.html][Working with Log Files in Emacs]].

#+BEGIN_SRC emacs-lisp
  (use-package vlf :ensure t)

  (use-package log4j-mode
    :ensure t
    :mode "\\.log\\'")
#+END_SRC

** Lua

#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :ensure t
    :mode ("\\.lua\\'" "\\.p8\\'"))
#+END_SRC

** Markdown

Nothing!  Nothing for markdown!  Just treat it like stupid plain text!

** Nginx

#+BEGIN_SRC emacs-lisp
  (use-package nginx-mode
    :ensure t)
#+END_SRC

** Python

Install these dependencies

#+BEGIN_SRC sh
  pip install rope flake8 importmagic autopep8 yapf ipdb ipython virtualenv virtualenvwrapper
#+END_SRC

Install virtualenvwrapper support.

#+BEGIN_SRC emacs-lisp
  (use-package virtualenvwrapper
    :ensure t)
#+END_SRC

Use ipython for running the code in a shell.  Evidently, it's still
experimental.  I have issues with some of the tab completion, so I'll
end up using =*ansi-term*= instead.

#+BEGIN_SRC emacs-lisp
  (setq python-shell-interpreter "ipython"
	python-shell-interpreter-args "-i --simple-prompt")
#+END_SRC

Let elpy do its thing.

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init (elpy-enable))
#+END_SRC

** Ruby
   
These are very much a work in progress.  I know about as much about
ruby as I know about scented candles and professional football.

#+BEGIN_SRC emacs-lisp
  (setq ruby-deep-indent-paren nil)
#+END_SRC

** Rust

#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :mode "\\.rs'")
#+END_SRC

** Terraform

#+BEGIN_SRC emacs-lisp
  (use-package terraform-mode
    :ensure t
    :mode "\\.tf\\'")
#+END_SRC

** Terminal

I'm a simple man, and I use a simple shell.

#+BEGIN_SRC emacs-lisp
  (defun recker/ansi-term ()
    (interactive)
    (ansi-term "/bin/bash"))
  (global-set-key (kbd "C-c e") 'eshell)
  (global-set-key (kbd "C-x t") 'recker/ansi-term)
#+END_SRC

The terminal buffer should be killed on exit.
   
#+BEGIN_SRC emacs-lisp
  (defadvice term-handle-exit
      (after term-kill-buffer-on-exit activate)
    (kill-buffer))
#+END_SRC

Aliases for eshell

#+BEGIN_SRC emacs-lisp
  (defalias 'ff #'find-file)
#+END_SRC

** Typescript

#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :ensure t
    :mode "\\.ts\\'")
#+END_SRC

** YAML

#+BEGIN_SRC emacs-lisp
  (use-package indent-guide
    :ensure t
    :init (add-hook 'yaml-mode-hook 'indent-guide-mode))

  (use-package yaml-mode
    :ensure t
    :mode ("\\.yml\\'" "\\.sls\\'")
    :init
    (add-hook 'yaml-mode-hook 'turn-off-auto-fill))
#+END_SRC

* Org

Org is love. Org is life.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :config (progn (custom-set-faces      ;Get rid of the different font sizes on headers
		    '(org-document-title ((t (:inherit outline-1 :height 1.0 :underline nil))))
		    '(org-level-1 ((t (:inherit outline-1 :height 1.0))))
		    '(org-level-2 ((t (:inherit outline-2 :height 1.0))))
		    '(org-level-3 ((t (:inherit outline-3 :height 1.0))))
		    '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
		    '(org-level-5 ((t (:inherit outline-5 :height 1.0)))))
		   (setq org-confirm-babel-evaluate nil))
    :bind (("C-c a" . org-agenda))
    :init (org-babel-do-load-languages
	   'org-babel-load-languages
	   '((awk . t)
	     (C . t)
	     (calc . t)
	     (clojure . t)
	     (css . t)
	     (ditaa . t)
	     (ditaa . t)
	     (haskell . t)
	     (java . t)
	     (js . t)
	     (latex . t)
	     (lisp . t)
	     (makefile . t)
	     (perl . t)
	     (python . t)
	     (ruby . t)
	     ;; (scala . t)
	     (screen . t)
	     ;; (sh . t)
	     (sql . t)
	     (sqlite . t))))
#+END_SRC

** Shims

Fix this broken function.  Thanks, [[http://www.howardism.org/Technical/Emacs/literate-devops.html][Howard.]]

#+BEGIN_SRC emacs-lisp
  (defun org-babel-temp-file (prefix &optional suffix)
    "Create a temporary file in the `org-babel-temporary-directory'.
  Passes PREFIX and SUFFIX directly to `make-temp-file' with the
  value of `temporary-file-directory' temporarily set to the value
  of `org-babel-temporary-directory'."
    (if (file-remote-p default-directory)
        (let ((prefix
               ;; We cannot use `temporary-file-directory' as local part
               ;; on the remote host, because it might be another OS
               ;; there.  So we assume "/tmp", which ought to exist on
               ;; relevant architectures.
               (concat (file-remote-p default-directory)
                       ;; REPLACE temporary-file-directory with /tmp:
                       (expand-file-name prefix "/tmp/"))))
          (make-temp-file prefix nil suffix))
      (let ((temporary-file-directory
             (or (and (boundp 'org-babel-temporary-directory)
                      (file-exists-p org-babel-temporary-directory)
                      org-babel-temporary-directory)
                 temporary-file-directory)))
        (make-temp-file prefix nil suffix))))
#+END_SRC

Use this package to make source pretty. Or just leave the CSS classes in case I want to add a theme some day.

#+BEGIN_SRC emacs-lisp
  (use-package "htmlize"
    :ensure t
    :config (setq org-html-htmlize-output-type 'inline-css))
#+END_SRC

** Blog

My blog.

#+BEGIN_SRC emacs-lisp
  (setq org-publish-project-alist '(("blog-html"
				     :html-link-home "/"
				     :base-directory "~/src/blog"
				     :base-extension "org"
				     :publishing-directory "~/public/www.alexrecker.com"
				     :publishing-function org-html-publish-to-html
				     :recursive t
				     :section-numbers nil
				     :with-toc nil)
				    ("blog-static"
				     :base-directory "~/src/blog"
				     :base-extension "css\\|pdf\\|jpg\\|jpeg\\|gif\\|png\\|txt\\|ogg\\|js\\|webm"
				     :publishing-directory "~/public/www.alexrecker.com"
				     :publishing-function org-publish-attachment
				     :recursive t)
				    ("blog" :components ("blog-html" "blog-static"))))

#+END_SRC

** Tables

Integrate gnuplot with org mode tables.  Example:

#+BEGIN_EXAMPLE
  ,#+PLOT: title:"Trial 2" ind:1 deps:(2 3) type:2d
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (use-package gnuplot
    :ensure t)

  (use-package gnuplot-mode
    :ensure t
    :bind ("M-C-g" . org-plot/gnuplot))
#+END_SRC

* Gnus

[[file:screenshots/gnus.png]]

Gnus has a steep learning curve, and learning to incorporate this
mysterious program has proven to be an emotional roller coaster. I’m
not even sure I know enough about it to say “it’s worth it”, but
hopefully this will help you with your own journey.

** Better Startup

Gnus requires a “primary method” from which you obtain
news. Unfortunately, the program kind of explodes if this isn’t set,
which proves to be kind of a pain when you want to poke around and set
up things interactively.

Here’s my workaround - set the primary method to a dummy protocol that
will immediately come back. In our case, this is a blank nnml stream.

#+BEGIN_SRC emacs-lisp
  (setq gnus-select-method '(nnml ""))
#+END_SRC

Default on topic mode, since it’s more helpful.

#+BEGIN_SRC emacs-lisp
  (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
#+END_SRC

Change path to =newsrc= config file.

#+BEGIN_SRC emacs-lisp
  (setq gnus-startup-file "~/docs/newsrc")
#+END_SRC

Read the auto save file on startup without asking.

#+BEGIN_SRC emacs-lisp
  (setq gnus-always-read-dribble-file t)
#+END_SRC

Enable the asynchronous flag.

#+BEGIN_SRC emacs-lisp
  (setq gnus-asynchronous t)
#+END_SRC

More possible placebo code to make gnus feel faster - use the cache.

#+BEGIN_SRC emacs-lisp
  (setq gnus-use-cache t)
#+END_SRC


** Better Folders

Gnus creates a bunch of folders in your home directory that, as far as
I can tell, are not needed outside of gnus. I've finally managed to
wrangle enough variables to tell gnus to save everything in the gnus
folder.  I save mine off in a version controlled "docs" directory.

#+BEGIN_SRC emacs-lisp
  (setq gnus-home-directory "~/docs/gnus"
        nnfolder-directory "~/docs/gnus/Mail/archive"
        message-directory "~/docs/gnus/Mail"
        nndraft-directory "~/docs/gnus/Drafts")
#+END_SRC

** Reading News

Use gmane and gwene to follow news, mailers, and tons of other
syndicated things. There are even comics.

#+BEGIN_SRC emacs-lisp
  (setq gnus-secondary-select-methods '((nntp "news.gmane.org")
                                        (nntp "news.gwene.org")))
#+END_SRC

** Reading Mail

Add a personal IMAP account.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'gnus-secondary-select-methods
               '(nnimap "personal"
                        (nnimap-address "imap.gmail.com")
                        (nnimap-server-port "imaps")
                        (nnimap-stream ssl)
                        (nnmail-expiry-target "nnimap+gmail:[Gmail]/Trash")
                        (nnmail-expiry-wait immediate)))
#+END_SRC

** Sending Mail

Posting styles for a personal email.

#+BEGIN_SRC emacs-lisp
  (setq gnus-posting-styles '((".*" (signature (string-join '("Alex Recker" "alex@reckerfamily.com") "\n")))))
#+END_SRC

Don't attempt to archive outbound emails to groups.

#+BEGIN_SRC emacs-lisp
  (setq gnus-message-archive-group nil)
#+END_SRC

Keep addresses locally using =bbdb=.

#+BEGIN_SRC emacs-lisp
  (use-package bbdb
    :ensure t
    :config (setq bbdb-file "~/docs/bbdb.el")
    :init
    (bbdb-mua-auto-update-init 'message)
    (setq bbdb-mua-auto-update-p 'query)
    (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus))
#+END_SRC

SMTP settings.

#+BEGIN_SRC emacs-lisp
  (setq smtpmail-smtp-service 587
        smtpmail-smtp-user "alex@reckerfamily.com"
        smtpmail-smtp-server "smtp.gmail.com"
        send-mail-function 'smtpmail-send-it)
#+END_SRC

I keep an encrypted authinfo in my docs under version control.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auth-sources "~/docs/authinfo.gpg")
#+END_SRC

Here's what it looks like.

#+BEGIN_EXAMPLE
  machine imap.gmail.com login alex@reckerfamily.com password <password> port imaps
  machine smtp.gmail.com login alex@reckerfamily.com password <password> port 587
#+END_EXAMPLE

* Miscellaneous

** Tools

#+BEGIN_SRC emacs-lisp
  (use-package pass
    :ensure t)

  (use-package request
    :ensure t)
#+END_SRC

** Functions

These are miscellaneous functions that I’ve written (or plagiarized).

#+BEGIN_SRC emacs-lisp
  (defun recker/purge-buffers ()
    "Delete all buffers, except for *scratch*."
    (interactive)
    (mapc #'(lambda (b) (unless (string= (buffer-name b) "*scratch*") (kill-buffer b))) (buffer-list)))

  (defun recker/unfill-region (beg end)
    "Unfill the region, joining text paragraphs into a single logical line."
    (interactive "*r")
    (let ((fill-column (point-max)))
      (fill-region beg end)))

  (defun recker/org-scratch ()
    "Open a org mode *scratch* pad."
    (interactive)
    (switch-to-buffer "*org scratch*")
    (org-mode)
    (insert "#+TITLE: Org Scratch\n\n"))

  (defun recker/sudo (file-name)
    "find-file, as sudo."
    (interactive "Fsudo Find file:")
    (let ((tramp-file-name (concat "/sudo::" (expand-file-name file-name))))
      (find-file tramp-file-name)))

  (defun recker/do-fancy-equal-thingy (beg end)
    (interactive "r")
    (align-regexp beg end "\\(\\s-*\\)\\ =" 1 0 t))

  (defun recker/pass-to-string (entry)
    "Read an entry from `pass` as a string."
    (with-temp-buffer
      (password-store-copy entry)
      (progn (yank) (buffer-string))))
#+END_SRC

** Keybindings

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c b") 'browse-url)
  (global-set-key (kbd "C-c f") 'project-find-file)
  (global-set-key (kbd "C-c l") 'sort-lines)
  (global-set-key (kbd "C-c o") 'recker/org-scratch)
  (global-set-key (kbd "C-c r") 'replace-string)
  (global-set-key (kbd "C-x C-k k") 'kill-buffer)
  (global-set-key (kbd "C-x k") 'kill-this-buffer)
  (global-set-key (kbd "C-x p") 'password-store-copy)
  (global-set-key (kbd "C-x |") 'recker/do-fancy-equal-thingy)
#+END_SRC

** Local

Emacs sometimes dumps things in =init.el=.  It means well, but I would
rather this be in a different file ignored by git.

#+BEGIN_SRC emacs-lisp
  (let ((custom (concat (file-name-as-directory user-emacs-directory) "custom.el")))
    (unless (file-exists-p custom)
      (with-temp-buffer
        (write-file custom)))
    (setq custom-file custom))
#+END_SRC

I also like to keep a file around for miscellaneous elisp that should
run on startup.  This is for machine specific settings or things I am
still tinkering with.

#+BEGIN_SRC emacs-lisp
  (let ((local (concat (file-name-as-directory user-emacs-directory) "local.el")))
    (unless (file-exists-p local)
      (with-temp-buffer
        (insert ";; This file is for local changes")
        (write-file local)))
    (load local))
#+END_SRC
