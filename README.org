#+TITLE: Emacs Configuration
#+AUTHOR: Alex Recker
#+STARTUP: showall

[[file:screenshots/scratch.png]]

It's been said "there are many ways to skin a cat".  The same can be
said of Emacs.  Probably.

* Personal

Don't be shy - introduce yourself to emacs.  If you are copying this
config, make sure you use your name.  We don't want to confuse my
mother.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Alex Recker"
        user-mail-address "alex@reckerfamily.com")
#+END_SRC

* Packages

All packages are installed with the [[https://github.com/jwiegley/use-package][use-package]] library.  Sadly, this
needs to load before org can tangle anything, so all the action is in
[[file:init.el][init.el]].

* Startup

** Path

Ensure that the system =PATH= is the one used by emacs.

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config (exec-path-from-shell-initialize))
#+END_SRC

** Scratch

The slash screen displayed on startup is a little too noisy for
me. The =*scratch*= buffer is a lot more low key.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message 't)
#+END_SRC

With this function, we can randomize the =*scratch*= message eachs
time using the output of a program.

#+BEGIN_SRC emacs-lisp
  (defun recker/get-startup-scratch ()
    (with-temp-buffer
      (lisp-mode)
      (insert-string (shell-command-to-string recker/scratch-message-program))
      (comment-region (point-max) (point-min))
      (buffer-string)))
#+END_SRC

I like to use my very own [[https://pypi.python.org/pypi/wilfred-say][wilfred-say]], but the classic =fortune= is a
good candidate as well.

#+BEGIN_SRC emacs-lisp
  (setq recker/scratch-message-program "wilfred-say")
  (setq initial-scratch-message (recker/get-startup-scratch))
#+END_SRC

Make the =*scratch*= buffer unkillable.

#+BEGIN_SRC emacs-lisp
  (use-package unkillable-scratch
    :ensure t
    :init (unkillable-scratch))
#+END_SRC

** Server

Start the emacs server if it is not running.

#+BEGIN_SRC emacs-lisp
  (require 'server)
  (unless (server-running-p)
    (server-start))
#+END_SRC

This allows you to connect to the emacs process from somewhere else -
like a terminal session.

* Interface

** Better Defaults

Emacs comes with some obnixious defaults.  "Not on my watch!", yelled
Alex as he disabled them.

#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil
        auto-save-default nil
        indent-tabs-mode nil)

  (global-auto-revert-mode 1)
  (menu-bar-mode 0)
  (scroll-bar-mode 0)
  (tool-bar-mode 0)
  (delete-selection-mode t)
#+END_SRC

** Better Comments

I overwrite the build-in =comment-dwim= with its superior sequel.

#+BEGIN_SRC emacs-lisp
  (use-package comment-dwim-2
    :ensure t
    :bind ("M-;" . comment-dwim-2))
#+END_SRC

** Better Modeline

Hide all minor modes from the modeline (since there are usually like a
hundred).

#+BEGIN_SRC emacs-lisp
  (use-package rich-minority
    :ensure t
    :init (rich-minority-mode 1)
    :config (setq rm-blacklist ""))
#+END_SRC

** Better File Manager

By default, hide dot files.  They can be shown by disabling
=dired-omit-mode= with =C-x M-o=.

Another nice side effect of =dired-x= is suddenly gaining the ability
of jumping to the current file in dired with =C-x C-j=.

#+BEGIN_SRC emacs-lisp
  (require 'dired-x)
  (setq-default dired-omit-files-p t)
  (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))
#+END_SRC

** Better Text Selection

I use =expand-region= to incrementally grab larger portions of text
based on where the cursor is. It’s a brilliant tool.

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))
#+END_SRC

** Better Completion

Company mode.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config (global-company-mode))
#+END_SRC

Yasnippet - I don't use this nearly as much as I should be.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init (yas-global-mode 1))
#+END_SRC

Completion and filtering with ivy, supported by counsel.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :config (setq ivy-use-selectable-prompt t)
    :init (ivy-mode 1))

  (use-package counsel
    :ensure t
    :bind
    ("C-c i" . counsel-imenu)
    ("C-c s" . swiper)
    ("C-c g" . counsel-git-grep)
    ("C-x C-y" . counsel-yank-pop))
#+END_SRC

Spartparens - because I can't even be bothered to close my own
parentheses and quotes.

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :init (progn (smartparens-global-mode t)
                 (sp-pair "'" nil :actions :rem)))
#+END_SRC


** Better Git

Magit.  Seriously.  Just try it you heathen.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status))
#+END_SRC

* Modes

These are the settings for various editing modes - the top level being
=text-mode=, which is for "editing text written for humans to read".

#+BEGIN_SRC emacs-lisp
  (defun recker/text-mode-hook ()
    (auto-fill-mode 1)
    (flyspell-mode 1)
    (flymake-mode-off))
  (add-hook 'text-mode-hook 'recker/text-mode-hook)
#+END_SRC

Flycheck mode.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode))
#+END_SRC

Globally cleanup white space on save.

#+BEGIN_SRC emacs-lisp
  (use-package whitespace-cleanup-mode
    :ensure t
    :config (global-whitespace-cleanup-mode))
#+END_SRC

Use pretty symbols where possible.

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC

Support for [[http://editorconfig.org/][editorconfig]].

#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :ensure t
    :config (editorconfig-mode 1))
#+END_SRC

** Commmon Lisp

For this to work, sbcl should be installed and in =PATH=.

#+BEGIN_SRC emacs-lisp
  (use-package slime
    :ensure t
    :config (setq inferior-lisp-program (executable-find "sbcl")))

  (use-package slime-company
    :ensure t
    :init (slime-setup '(slime-fancy slime-company)))
#+END_SRC

** Csv

#+BEGIN_SRC emacs-lisp
  (use-package csv-mode
    :ensure t
    :mode "\\.csv\\'")
#+END_SRC

** Dockerfile

#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t
    :mode "\\Dockerfile\\'")
#+END_SRC


** Elisp

Disable those silly docstring warnings when editing elisp.

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'flycheck
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
#+END_SRC

** Groovy

Pretty much just for Jenkins files.

#+BEGIN_SRC emacs-lisp
  (use-package groovy-mode
    :ensure t
    :mode "\\Jenkinsfile\\'")
#+END_SRC


** HTML

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode ("\\.html\\'" "\\.jinja\\'")
    :config (setq web-mode-markup-indent-offset 2
                  web-mode-code-indent-offset 2))

  (use-package emmet-mode
    :ensure t
    :config (add-hook 'web-mode-hook 'emmet-mode))
#+END_SRC

** JavaScript

This is the web-scale portion of my config.

#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)
#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "pandoc"))
#+END_SRC

** Python

Install these dependencies

#+BEGIN_SRC sh
  pip install --user rope flake8 importmagic autopep8 yapf ipdb ipython virtualenv virtualenvwrapper
#+END_SRC

Install virtualenvwrapper support.

#+BEGIN_SRC emacs-lisp
  (use-package virtualenvwrapper
    :ensure t)
#+END_SRC

Use ipython for running the code in a shell.  Evidently, it's still
experimental.  I have issues with some of the tab completion, so I'll
end up using =*ansi-term*= instead.

#+BEGIN_SRC emacs-lisp
  (setq python-shell-interpreter "ipython"
	python-shell-interpreter-args "-i --simple-prompt")
#+END_SRC

Let elpy do its thing.

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init (elpy-enable))
#+END_SRC

** Ruby
   
These are very much a work in progress.  I know about as much about
ruby as I know about scented candles and professional football.

#+BEGIN_SRC emacs-lisp
  (setq ruby-deep-indent-paren nil)
#+END_SRC

** Terraform

#+BEGIN_SRC emacs-lisp
  (use-package terraform-mode
    :ensure t
    :mode "\\.tf\\'")
#+END_SRC


** Terminal

I'm a simple man, and I use a simple shell.

#+BEGIN_SRC emacs-lisp
  (defun recker/ansi-term ()
    (interactive)
    (ansi-term "/bin/bash"))
  (global-set-key (kbd "C-c e") 'eshell)
  (global-set-key (kbd "C-x t") 'recker/ansi-term)
#+END_SRC

The terminal buffer should be killed on exit.
   
#+BEGIN_SRC emacs-lisp
  (defadvice term-handle-exit
      (after term-kill-buffer-on-exit activate)
    (kill-buffer))
#+END_SRC

Aliases for eshell

#+BEGIN_SRC emacs-lisp
  (defalias 'ff #'find-file)
#+END_SRC

* YAML

#+BEGIN_SRC emacs-lisp
  (use-package indent-guide
    :ensure t
    :init (add-hook 'yaml-mode-hook 'indent-guide-mode))

  (use-package yaml-mode
    :ensure t
    :mode ("\\.yml\\'" "\\.sls\\'")
    :init
    (add-hook 'yaml-mode-hook 'turn-off-auto-fill))
#+END_SRC

* Org

Org is love. Org is life.

#+BEGIN_SRC emacs-lisp
  (use-package ob-http :ensure t)
  (use-package ob-browser :ensure t)

  (use-package org
    :ensure t
    :config (progn (setq org-hide-emphasis-markers t)
                   (custom-set-faces      ;Get rid of the different font sizes on headers
                    '(org-document-title ((t (:inherit outline-1 :height 1.0 :underline nil))))
                    '(org-level-1 ((t (:inherit outline-1 :height 1.0))))
                    '(org-level-2 ((t (:inherit outline-2 :height 1.0))))
                    '(org-level-3 ((t (:inherit outline-3 :height 1.0))))
                    '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
                    '(org-level-5 ((t (:inherit outline-5 :height 1.0))))))
    :init (org-babel-do-load-languages
           'org-babel-load-languages
           '((awk . t)
             (browser . t)
             (C . t)
             (calc . t)
             (clojure . t)
             (css . t)
             (ditaa . t)
             (ditaa . t)
             (haskell . t)
             (http . t)
             (java . t)
             (js . t)
             (latex . t)
             (lisp . t)
             (makefile . t)
             (perl . t)
             (python . t)
             (ruby . t)
             (scala . t)
             (screen . t)
             (sh . t)
             (sql . t)
             (sqlite . t))))
#+END_SRC

This package gives the ability to export documents in that wonky fake
markdown that Atlassian invented.

#+BEGIN_SRC emacs-lisp
  (use-package ox-jira :ensure t)
#+END_SRC

Use this package to make source pretty. Or just leave the CSS classes in case I want to add a theme some day.

#+BEGIN_SRC emacs-lisp
  (use-package "htmlize"
    :ensure t
    :config (setq org-html-htmlize-output-type 'css))
#+END_SRC

* Gnus

[[file:screenshots/gnus.png]]

Gnus has a steep learning curve, and learning to incorporate this
mysterious program has proven to be an emotional roller coaster. I’m
not even sure I know enough about it to say “it’s worth it”, but
hopefully this will help you with your own journey.

** Better Startup

Gnus requires a “primary method” from which you obtain
news. Unfortunately, the program kind of explodes if this isn’t set,
which proves to be kind of a pain when you want to poke around and set
up things interactively.

Here’s my workaround - set the primary method to a dummy protocol that
will immediately come back. In our case, this is a blank nnml stream.

#+BEGIN_SRC emacs-lisp
  (setq gnus-select-method '(nnml ""))
#+END_SRC

Default on topic mode, since it’s more helpful.

#+BEGIN_SRC emacs-lisp
  (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
#+END_SRC

Disable saving to a =newsrc= config file.

#+BEGIN_SRC emacs-lisp
  (setq gnus-save-newsrc-file nil)
#+END_SRC

Read the auto save file on startup without asking.

#+BEGIN_SRC emacs-lisp
  (setq gnus-always-read-dribble-file t)
#+END_SRC


** Better Folders

Gnus creates a bunch of folders in your home directory that, as far as
I can tell, are not needed outside of gnus. These settings will hide
them all in =~/.gnus=, which will serve as our convenient nuke-point
if things ever go south while playing around.

Yes - nnfolder-directory is really needed. Whether this is a bug or
not, the redundancy is intentional.

#+BEGIN_SRC emacs-lisp
  (setq gnus-home-directory "~/.gnus"
        nnfolder-directory "~/.gnus/Mail/archive"
        message-directory "~/.gnus/Mail"
        nndraft-directory "~/.gnus/Drafts")
#+END_SRC


** Reading News

Use gmane and gwene to follow news, mailers, and tons of other
syndicated things. There are even comics.

#+BEGIN_SRC emacs-lisp
  (setq gnus-secondary-select-methods '((nntp "news.gmane.org")
                                        (nntp "news.gwene.org")))
#+END_SRC

** Reading Mail

Add a personal IMAP account.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'gnus-secondary-select-methods
               '(nnimap "personal"
                        (nnimap-address "imap.gmail.com")
                        (nnimap-server-port "imaps")
                        (nnimap-stream ssl)
                        (nnmail-expiry-target "nnimap+gmail:[Gmail]/Trash")
                        (nnmail-expiry-wait immediate)))
#+END_SRC

** Sending Mail

Posting styles for a personal email.

#+BEGIN_SRC emacs-lisp
  (setq gnus-posting-styles '((".*" (signature (string-join '("Alex Recker" "alex@reckerfamily.com") "\n")))))
#+END_SRC

Don't attempt to archive outbound emails to groups.

#+BEGIN_SRC emacs-lisp
  (setq gnus-message-archive-group nil)
#+END_SRC

Keep addresses locally using =bbdb=.

#+BEGIN_SRC emacs-lisp
  (use-package bbdb
    :ensure t
    :config (setq bbdb-file "~/.bbdb")
    :init
    (bbdb-mua-auto-update-init 'message)
    (setq bbdb-mua-auto-update-p 'query)
    (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus))
#+END_SRC


The rest of the configuration can be set up interactively.  Just open
a message buffer and hit =C-c C-c=.  Emacs will allow you to choose a
delivery method, enter your credentials, and even save everything.

To encrypt your credentials, just save it within =~/.authinfo.gpg=.

* Miscellaneous

** Functions

These are miscellaneous functions that I’ve written (or plagiarized).

#+BEGIN_SRC emacs-lisp
  (defun recker/purge-buffers ()
    "Delete all buffers, except for *scratch*."
    (interactive)
    (mapc #'(lambda (b) (unless (string= (buffer-name b) "*scratch*") (kill-buffer b))) (buffer-list)))

  (defun recker/unfill-region (beg end)
    "Unfill the region, joining text paragraphs into a single logical line."
    (interactive "*r")
    (let ((fill-column (point-max)))
      (fill-region beg end)))

  (defun recker/org-scratch ()
    "Open a org mode *scratch* pad."
    (interactive)
    (switch-to-buffer "*org scratch*")
    (org-mode)
    (insert "#+TITLE: Org Scratch\n\n"))
#+END_SRC

** Keybindings

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c b") 'browse-url)
  (global-set-key (kbd "C-x k") 'kill-this-buffer)
  (global-set-key (kbd "C-x C-k k") 'kill-buffer)
  (global-set-key (kbd "C-c f") 'project-find-file)
  (global-set-key (kbd "C-c l") 'sort-lines)
  (global-set-key (kbd "C-c o") 'recker/org-scratch)
  (global-set-key (kbd "C-c r") 'replace-string)
#+END_SRC

** Local

Emacs sometimes dumps things in =init.el=.  It means well, but I would
rather this be in a different file ignored by git.

#+BEGIN_SRC emacs-lisp
  (let ((custom (concat (file-name-as-directory user-emacs-directory) "custom.el")))
    (unless (file-exists-p custom)
      (with-temp-buffer
        (write-file custom)))
    (setq custom-file custom))
#+END_SRC

I also like to keep a file around for miscellaneous elisp that should
run on startup.  This is for machine specific settings or things I am
still tinkering with.

#+BEGIN_SRC emacs-lisp
  (let ((local (concat (file-name-as-directory user-emacs-directory) "local.el")))
    (unless (file-exists-p local)
      (with-temp-buffer
        (insert ";; This file is for local changes")
        (write-file local)))
    (load local))
#+END_SRC
