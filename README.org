#+TITLE: Emacs Configuration
#+AUTHOR: Alex Recker

* Personal
  
  If you use this config, make sure you change this.  Otherwise, you
  may confuse my mother.

  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Alex Recker"
          user-mail-address "alex@reckerfamily.com")
  #+END_SRC

* Building

  This config is crafted around the latest version of emacs, cloned
  from git and built form source.

  #+BEGIN_EXAMPLE
    $ mkdir src && cd src
    $ git clone -b master git://git.sv.gnu.org/emacs.git && cd emacs
    $ ./autogen.sh
    $ ./configure
    $ make
    $ sudo make install
  #+END_EXAMPLE

  The same goes for this config, which can simply be cloned in place.

  #+BEGIN_EXAMPLE
    git clone https://github.com/arecker/emacs.d .emacs.d
  #+END_EXAMPLE

* Interface

  Disable some obnoxious defaults.

  #+BEGIN_SRC emacs-lisp
    (setq backup-inhibited t
          auto-save-default 0
          indent-tabs-mode nil)

    (menu-bar-mode 0)
    (tool-bar-mode 0)
    (toggle-scroll-bar 0)
  #+END_SRC

  Use this magic snippet to hide minor modes from the modeline.

  #+BEGIN_SRC emacs-lisp
    (define-minor-mode minor-mode-blackout-mode
      "Hides minor modes from the mode line."
      t)
    (catch 'done
      (mapc (lambda (x)
              (when (and (consp x)
                         (equal (cadr x) '("" minor-mode-alist)))
                (let ((original (copy-sequence x)))
                  (setcar x 'minor-mode-blackout-mode)
                  (setcdr x (list "" original)))
                (throw 'done t)))
            mode-line-modes))
  #+END_SRC

  Add better comment handling and overwrite the built-in one.

  #+BEGIN_SRC emacs-lisp
    (use-package comment-dwim-2
      :ensure t
      :bind ("M-;" . comment-dwim-2))
  #+END_SRC

  Use expand region for quickly hilighting incremental blocks of text.

  #+BEGIN_SRC emacs-lisp
    (use-package expand-region
      :ensure t
      :bind ("C-=" . er/expand-region))
  #+END_SRC

* Startup

  Display a quote from [[https://pypi.python.org/pypi/wilfred-say][wilfred-say]] or fortune in the =*scratch*=
  buffer.

  #+BEGIN_SRC emacs-lisp
    (defun recker/startup-scratch-buffer ()
      (setq inhibit-startup-message 't)
      (let ((wilfred-installed (executable-find "wilfred-say"))
            (fortune-installed (executable-find "fortune"))
            (comment-command-output (lambda (c)
                                      (concat
                                       (mapconcat
                                        (lambda (x) (concat ";; " x))
                                        (split-string (shell-command-to-string c) "\n" t) "\n")
                                       "\n" "\n"))))
        (if wilfred-installed
            (setq initial-scratch-message
                  (funcall comment-command-output "wilfred-say"))
          (if fortune-installed
              (setq initial-scratch-message
                    (funcall comment-command-output "fortune"))))))
    (recker/startup-scratch-buffer)
  #+END_SRC

  File registers for quick access.

  #+BEGIN_SRC emacs-lisp
    (defun recker/startup-registers ()
      (set-register ?b '(file . "~/git/blog"))
      (set-register ?d '(file . "~/Desktop"))
      (set-register ?e '(file . "~/.emacs.d/README.org"))
      (set-register ?g '(file . "~/git"))
      (set-register ?i '(file . "~/.emacs.d/init.el"))
      (set-register ?o '(file . "~/org"))
      (set-register ?p '(file . "~/org/personal.org"))
      (set-register ?w '(file . "~/org/work.org")))
    (recker/startup-registers)
  #+END_SRC

  Fix the PATH everywhere.  I'm not sure why this is needed, but this
  package seems to make OSX behave.

  #+BEGIN_SRC emacs-lisp
    (use-package exec-path-from-shell
      :ensure t
      :config (exec-path-from-shell-initialize))
  #+END_SRC

* Git

  [[https://magit.vc/][Magit]] might be a good enough reason on its own to switch to emacs.

  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :bind ("C-x g" . magit-status))
  #+END_SRC

  Display +/- symbols in the margin of a VC'ed file.

  #+BEGIN_SRC emacs-lisp
    (use-package git-gutter
      :ensure t
      :config (global-git-gutter-mode 1))
  #+END_SRC

* Modes

  This is the =text-mode= hook, which is for editing text written for
  humans to read. It is up to more specific modes to disable these
  options if desired.

  #+BEGIN_SRC emacs-lisp
    (defun recker/text-mode-hook ()
      (auto-fill-mode 1)
      (flyspell-mode 1))
    (add-hook 'text-mode-hook 'recker/text-mode-hook)
  #+END_SRC

  For some reason, I end up alphabetizing lists a lot.  Let's bind
  that function to something.

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c l") 'sort-lines)
  #+END_SRC

  
** Term

   Kill the term buffer on exit.

   #+BEGIN_SRC emacs-lisp
     (defadvice term-handle-exit
         (after term-kill-buffer-on-exit activate)
       (kill-buffer))
   #+END_SRC

   For =ansi-term=, just use a simple bash shell for a simple man.

   #+BEGIN_SRC emacs-lisp
     (defun recker/ansi-term ()
       (interactive)
       (ansi-term "/bin/bash"))
   #+END_SRC

   Bind these to something that phonetically makes sense.

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c e") 'eshell)
     (global-set-key (kbd "C-x t") 'recker/ansi-term)
   #+END_SRC

   Disable line hilighting in terminals - it's distracting.

   #+BEGIN_SRC emacs-lisp
     (defun recker/term-mode-hook ()
       (global-hl-line-mode 0))
   #+END_SRC

* Org

  Install org-mode from the repository.

  #+BEGIN_SRC emacs-lisp
    (use-package "org"
      :ensure t
      :pin "org"
      :init
      (setq org-agenda-files '("~/org")
            org-capture-templates
            '(
              ("i" "idea" entry (file+headline "~/org/personal.org" "Ideas")
               "* %?"
               :empty-lines 1)
              ))
      :config
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((python . t)
         (ruby . t)
         (sh . t)
         (java . t)
         (js . t)
         (C . t)))
      :bind (("C-c a" . org-agenda)
             ("C-c c" . org-capture)
             ("C-c s" . org-store-link)))
  #+END_SRC

  I need some extra packages to publish my blog.  They can be found in
  this package.

  #+BEGIN_SRC emacs-lisp
    (use-package "org-plus-contrib"
      :ensure t
      :pin "org")
  #+END_SRC

* Local Changes

  Miscellaneous local changes can be kept [[file:lisp][here]].  This is convenient
  for secrets, work things, or just testing something out for the day.

  This function loads all =.el= files there.

  #+BEGIN_SRC emacs-lisp
    (defun recker/load-directory (dir)
      (let ((load-it (lambda (f)
                       (load-file (concat (file-name-as-directory dir) f)))
                     ))
        (mapc load-it (directory-files dir nil "\\.el$"))))
    (recker/load-directory "~/.emacs.d/lisp/")
  #+END_SRC
