#+TITLE: Emacs Configuration
#+AUTHOR: Alex Recker
#+STARTUP: showall

It's been said "there are many ways to skin a cat".  The same can be
said of Emacs.  Probably.

* Personal

Don't be shy - introduce yourself to emacs.  If you are copying this
config, make sure you use your name.  We don't want to confuse my
mother.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Alex Recker"
	user-mail-address "alex@reckerfamily.com")
#+END_SRC

* Packages

All packages are installed with the [[https://github.com/jwiegley/use-package][use-package]] library.  Sadly, this
needs to load before org can tangle anything, so all the action is in
[[file:init.el][init.el]].

* Paths

Ensure that the system =PATH= is the one used by emacs.

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config (exec-path-from-shell-initialize))
#+END_SRC

Helper function for sniffing OS.

#+BEGIN_SRC emacs-lisp
  (defun recker/macos-p ()
    "Returns T if running on MacOS."
    (string-equal system-type "darwin"))
#+END_SRC

Personal directories.

#+BEGIN_SRC emacs-lisp
  (defun recker/path (dir &optional subpath)
    (let* ((macos-p (string-equal system-type "darwin"))
	   (dir (pcase dir
		  ('home "~")
		  ('desktop (if macos-p "~/Desktop" "~/desktop"))
		  ('docs (if macos-p "~/Documents" "~/docs"))
		  ('pics (if macos-p "~/Pictures" "~/pics"))
		  ('public (if macos-p "~/Public" "~/public"))
		  ('src "~/src")
		  ('emacs user-emacs-directory)
		  (_ (error (format "no %s directory!" dir)))))
	   (subdir (or subpath "")))
      (expand-file-name (concat (file-name-as-directory dir) subpath))))
#+END_SRC

Register some files I visit often.

#+BEGIN_SRC emacs-lisp
  (set-register ?b '(file . "/ssh:bedroom:/home/alex"))
  (set-register ?d `(file . ,(recker/path 'desktop)))
  (set-register ?e `(file . ,(recker/path 'emacs "README.org")))
  (set-register ?f '(file . "/ssh:alex@archive.local:/mnt/"))
  (set-register ?l `(file . ,(recker/path 'emacs "local.el")))
  (set-register ?o `(file . ,(recker/path 'docs "opsat.org")))
#+END_SRC

* Interface

** Better Look

On MacOS, I like my emacs /extra thicc/.

#+BEGIN_SRC emacs-lisp
  (when (and (recker/macos-p) (display-graphic-p))
    (setq initial-frame-alist '((width . 99) (height . 53))
	  default-frame-alist '((width . 99) (height . 53))))
#+END_SRC

Dynamically set the font, and define some functions for changing the
font on the fly.

#+BEGIN_SRC emacs-lisp
  (setq-default recker/regular-font (if (recker/macos-p)
					"Monaco 16"
				      "Inconsolata 13"))

  (setq-default recker/large-font (if (recker/macos-p)
				      "Monaco 20"
				    "Inconsolata 18"))

  (when (display-graphic-p)
    (set-frame-font recker/regular-font nil t))

  (defun recker/toggle-font-size ()
    (interactive)
    (unless (display-graphic-p)
      (error "Running in -nw mode, font won't work"))
    (let* ((current-font-obj (face-attribute 'default :font))
	   (current-font (format "%s %s"
				 (font-get current-font-obj :family)
				 (font-get current-font-obj :size)))
	   (desired-font (if (string-equal current-font recker/regular-font)
			     recker/large-font
			   recker/regular-font)))
      (set-frame-font (progn (message "Changing font to %s" desired-font) desired-font))))

  (global-set-key (kbd "C-c C-x f") 'recker/toggle-font-size)
#+END_SRC

** Better Defaults

Emacs comes with some obnixious defaults.  "Not on my watch!", yelled
Alex as he disabled them.

#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil
	auto-save-default nil
	indent-tabs-mode nil
	ns-confirm-quit 1)

  (global-auto-revert-mode 1)
  (menu-bar-mode 0)
  (delete-selection-mode t)
  (tool-bar-mode -1)

  (when (display-graphic-p)
    (scroll-bar-mode -1))

  (setq vc-follow-symlinks t)
#+END_SRC

Because the command =C-x C-c= is easier to type by accident than you'd
think, enable this so Emacs says "are you sure?"

#+BEGIN_SRC emacs-lisp
  (setq confirm-kill-emacs #'yes-or-no-p)
#+END_SRC

Disable goal column warning.

#+BEGIN_SRC emacs-lisp
  (put 'set-goal-column 'disabled nil)
#+END_SRC

Upcase

#+BEGIN_SRC emacs-lisp
(put 'upcase-region 'disabled nil)
#+END_SRC

** Better Comments

I overwrite the build-in =comment-dwim= with its superior sequel.

#+BEGIN_SRC emacs-lisp
  (use-package comment-dwim-2
    :ensure t
    :bind ("M-;" . comment-dwim-2))
#+END_SRC

** Better Modeline

Hide all minor modes from the modeline (since there are usually like a
hundred).

#+BEGIN_SRC emacs-lisp
  (use-package rich-minority
    :ensure t
    :init (rich-minority-mode 1)
    :config (setq rm-blacklist ""))
#+END_SRC

** Better Bookmarks

Automatically save the bookmark file each time it is modified.  This
prevents losing bookmarks created in separate emacs clients.

#+BEGIN_SRC emacs-lisp
  (setq bookmark-save-flag 1
	bookmark-default-file (recker/path 'docs "emacs/bookmarks.el"))
#+END_SRC

** Better File Manager

By default, hide dot files.  They can be shown by disabling
=dired-omit-mode= with =C-x M-o=.

Another nice side effect of =dired-x= is suddenly gaining the ability
of jumping to the current file in dired with =C-x C-j=.

#+BEGIN_SRC emacs-lisp
  (require 'dired-x)
  (setq-default dired-omit-files-p t)
  (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))
#+END_SRC

Add the =-h= switch to the dired output to show prettier filenames.

#+BEGIN_SRC emacs-lisp
  (setq dired-listing-switches "-alh")
#+END_SRC

Don't ask permission to delete the buffer of a deleted file.

#+BEGIN_SRC emacs-lisp
  (setq dired-clean-confirm-killing-deleted-buffers nil)
#+END_SRC

** Better Text Selection

I use =expand-region= to incrementally grab larger portions of text
based on where the cursor is. It’s a brilliant tool.

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))
#+END_SRC

** Better Completion

Company mode.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init (global-company-mode)
    :config (setq company-tooltip-align-annotations t
		  company-dabbrev-downcase nil))

  (use-package company-quickhelp
    :ensure t
    :init (company-quickhelp-mode))
#+END_SRC

Yasnippet - I don't use this nearly as much as I should be.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init (yas-global-mode 1))
#+END_SRC

Completion and filtering with ivy, supported by counsel.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :config (setq ivy-use-selectable-prompt t)
    :init (ivy-mode 1))

  (use-package counsel
    :ensure t
    :bind
    ("C-c i" . counsel-imenu)
    ("C-c s" . swiper)
    ("C-c g" . counsel-git-grep)
    ("C-x C-y" . counsel-yank-pop))
#+END_SRC

Use projectile for finding things within projects.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (setq projectile-completion-system 'ivy)
    :init
    (projectile-mode t))
#+END_SRC

** Better Git

Magit.  Seriously.  Just try it you heathen.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind
    ("C-x g" . magit-status)
    ("C-c m" . magit-blame)
    :config (magit-add-section-hook 'magit-status-sections-hook
				    'magit-insert-unpushed-to-upstream
				    'magit-insert-unpushed-to-upstream-or-recent
				    'replace))
#+END_SRC

** Better Spellcheck.

Use personal dictionary from docs for ispell.

#+BEGIN_SRC emacs-lisp
  (setq ispell-personal-dictionary (recker/path 'docs "emacs/ispell.dict"))
#+END_SRC

Use =ispell= explicitly, so it doesn't accidentally pick up a
different program like =aspell= on a mac.

#+BEGIN_SRC emacs-lisp
(setq ispell-program-name (executable-find "ispell"))
#+END_SRC

Flycheck mode.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode))
#+END_SRC

** Better Scratch

The slash screen displayed on startup is a little too noisy for
me. The =*scratch*= buffer is a lot more low key.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message 't)
#+END_SRC

Here is a collection of pithy quotes I like to display on my scratch
screen.

#+NAME: scratch-quotes
| Quote                                                                                                                      | Attribution               |
|----------------------------------------------------------------------------------------------------------------------------+---------------------------|
| Sanity and happiness are an impossible combination.                                                                        | Mark Twain                |
| Trust thyself only, and another shall not betray thee.                                                                     | Thomas Fuller             |
| Fear has its uses but cowardice has none.                                                                                  | Mahatma Ghandi            |
| Happiness can exist only in acceptance.                                                                                    | George Orwell             |
| Seek respect mainly from thyself, for it comes first from within.                                                          | Steven H. Coogler         |
| Conscience is the dog that can't bite, but never stops barking.                                                            | Proverb                   |
| In general, pride is at the bottom of all great mistakes.                                                                  | Steven H. Coogler         |
| Anger as soon as fed is dead -- tis starving makes it fat.                                                                 | Emily Dickinson           |
| Make no judgements where you have no compassion.                                                                           | Anne McCaffrey            |
| Isolation is a self-defeating dream.                                                                                       | Carlos Salinas de Gortari |
| Doubt must be no more than vigilance, otherwise it can become dangerous.                                                   | George C. Lichtenberg     |
| Love is a willingless to sacrifice.                                                                                        | Michael Novak             |
| The value of identity is that so often with it comes purpose.                                                              | Richard R. Grant          |
| Discontent is the first necessity of progress.                                                                             | Thomas Edison             |
| Some of us think holding on makes us strong, but sometimes it is letting go.                                               | Herman Hesse              |
| Let not a man guard his dignity but let his dignity guard him.                                                             | Ralph Waldo Emerson       |
| Guilt: the gift that keeps on giving.                                                                                      | Erma Bombeck              |
| Be here now.                                                                                                               | Ram Dass                  |
| The master understands that the universe is forever out of control.                                                        | Lao Tzu                   |
| Our biggest problems arise from the avoidance of smaller ones.                                                             | Jeremy Caulfield          |
| The truth will set you free, but first it will make you miserable                                                          | James A. Garfield         |
| The thing that lies at the foundation of positive change is service to a fellow human being                                | Lee Iacocca               |
| Honesty and transparency make you vulnerable. Be honest and transparent anyway                                             | Mother Teresa             |
| If you do not ask the right questions, you do not get the right answers.                                                   | Edward Hodnett            |
| Resentment is like taking poison and waiting for the other person to die.                                                  | Malachy McCourt           |
| If we knew each other's  secrets, what comfort should we find.                                                             | John Churton Collins      |
| The mistake is thinking that there can be an antidote to the uncertainty.                                                  | David Levithan            |
| Cure sometimes, treat often, comfort always.                                                                               | Hippocrates               |
| Suspicion is a heavy armor and with its weight it impedes more than it protects.                                           | Robert Burns              |
| Sincerity, even if it speaks with a stutter, will sound eloquent when inspired.                                            | Eiji Yoshikawa            |
| I have little shame, no dignity - all in the name of a better cause.                                                       | A.J. Jacobs               |
| Truth may sometimes hurt, but delusion harms.                                                                              | Vanna Bonta               |
| Intuition is more important to discovery than logic.                                                                       | Henri Poincare            |
| How weird was it to drive streets I knew so well. What a different perspective.                                            | Suzanne Vega              |
| There can be no progress without head-on confrontation.                                                                    | Christopher Hitchens      |
| Sometimes it's necessary to go a long distance out of the way to come back a short distance correctly.                     | Edward Albea              |
| Stagnation is death. If you don't change, you die. It's that simple. It's that scary.                                      | Leonard Sweet             |
| In my opinion, actual heroism, like actual love, is a messy, painful, vulnerable business.                                 | John Green                |
| Maybe all one can do is hope to end up with the right regrets.                                                             | Arthur Miller             |
| If you have behaved badly, repent, make what amends you can and address yourself to the task of behaving better next time. | Aldous Huxley             |
| Sooner or later everyone sits down to a banquet of consequences.                                                           | Robert Louis Stevenson    |
| We are all in the same boat, in a stormy sea, and we owe each other a terrible loyalty.                                    | G.K. Chesterton           |
| In our quest for the answers of life we tend to make order out of chaos, and chaos out of order.                           | Jeffrey Fry               |
| There are many ways of going forward, but only one way of standing still.                                                  | Franklin D. Roosevelt     |
| Truth is outside of all patterns.                                                                                          | Bruce Lee                 |
| By imposing too great a responsibility, or rather, all responsibility, on yourself, you crush yourself.                    | Franz Kafka               |
| How few there are who have courage enough to own their faults, or resolution enough to mend them.                          | Benjamin Franklin         |
| Resistance is useless.                                                                                                     | Doctor Who                |
| Happiness does not depend on outward things, but on the way we see them.                                                   | Leo Tolstoy               |
| Being president is like being a jackass in a hailstorm.  There's nothing to do but to stand there and take it.             | Lyndon Johnson            |

Pick a random one on startup, wrap it in a lisp comment box, and
assign it to the scratch message variable.

#+BEGIN_SRC emacs-lisp :var quotes=scratch-quotes
  (setq initial-scratch-message (let* ((choice (nth (random (length quotes)) quotes))
				       (text (car choice))
				       (attribution (car (cdr choice))))
				  (with-temp-buffer
				    (lisp-mode)
				    (newline)
				    (insert (format "\"%s\"\n" text))
				    (fill-region (point-min) (point-max))
				    (insert (format "-- %s" attribution))
				    (comment-region (point-min) (point-max))
				    (dotimes (_ 2) (newline))
				    (buffer-string))))
#+END_SRC

Make the =*scratch*= buffer unkillable.

#+BEGIN_SRC emacs-lisp
  (defun recker/dont-kill-scratch ()
    "Return NIL if the current buffer is the *scratch* buffer."
    (not (equal (buffer-name (current-buffer)) "*scratch*")))

  (add-hook 'kill-buffer-query-functions 'recker/dont-kill-scratch)
#+END_SRC

** Better Passwords

My own functions for [[https://www.passwordstore.org/][pass]].

#+BEGIN_SRC emacs-lisp
  (defun recker/pass-directory ()
    (or (bound-and-true-p recker/active-pass-directory)
	(expand-file-name "~/.password-store")))

  (defun recker/pass--file-to-entry (path)
    (file-name-sans-extension
     (file-relative-name path (recker/pass-directory))))

  (defun recker/pass-list-entries ()
    (mapcar
     #'recker/pass--file-to-entry
     (directory-files-recursively (recker/pass-directory) ".gpg")))

  (defun recker/pass-to-string (path)
    (first
     (split-string
      (shell-command-to-string
       (format "PASSWORD_STORE_DIR=\"%s\" pass \"%s\" | head -1" (recker/pass-directory) path))
      "\n")))

  (defun recker/pass-to-clip (path)
    (interactive (list (completing-read "Password: " (recker/pass-list-entries) nil t)))
    (shell-command
     (format "PASSWORD_STORE_DIR=\"%s\" pass -c \"%s\"" (recker/pass-directory) path)))

  (defun recker/pass-to-clip-work ()
    (interactive)
    (let ((recker/active-pass-directory (expand-file-name "~/.password-store-work")))
      (funcall-interactively #'recker/pass-to-clip (completing-read "Password: " (recker/pass-list-entries) nil t))))
#+END_SRC

* Modes

Support for [[http://editorconfig.org/][editorconfig]], no matter what the mode is.

#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :ensure t
    :config (editorconfig-mode 1))
#+END_SRC

** C

Taken from [[https://www.kernel.org/doc/html/v4.10/process/coding-style.html#you-ve-made-a-mess-of-it][The Linux Kernel Coding Style]], which was a way better read
than you'd think.

I slightly modified the provided snippet so that all of my C would
obey these rules by default.

#+BEGIN_SRC emacs-lisp
  (defun c-lineup-arglist-tabs-only (ignored)
    "Line up argument lists by tabs, not spaces"
    (let* ((anchor (c-langelem-pos c-syntactic-element))
	   (column (c-langelem-2nd-pos c-syntactic-element))
	   (offset (- (1+ column) anchor))
	   (steps (floor offset c-basic-offset)))
      (* (max steps 1)
	 c-basic-offset)))

  (add-hook 'c-mode-common-hook
	    (lambda ()
	      ;; Add kernel style
	      (c-add-style
	       "linux-tabs-only"
	       '("linux" (c-offsets-alist
			  (arglist-cont-nonempty
			   c-lineup-gcc-asm-reg
			   c-lineup-arglist-tabs-only))))))

  (add-hook 'c-mode-hook (lambda ()
			   (setq indent-tabs-mode t)
			   (setq show-trailing-whitespace t)
			   (c-set-style "linux-tabs-only")))
#+END_SRC

** Clojure

#+BEGIN_SRC emacs-lisp
  ;; (use-package cider
  ;;   :ensure t)

  (use-package clojure-mode
    :ensure t)
#+END_SRC

** Commmon Lisp

For this to work, sbcl should be installed and in =PATH=.

#+BEGIN_SRC emacs-lisp
  (use-package slime
    :ensure t
    :config (setq inferior-lisp-program (executable-find "sbcl")))

  (use-package slime-company
    :ensure t
    :init (slime-setup '(slime-fancy slime-company)))
#+END_SRC

** Csv

#+BEGIN_SRC emacs-lisp
  ;; (use-package csv-mode
  ;;   :ensure t
  ;;   :defer t
  ;;   :mode "\\.csv\\'")
#+END_SRC

** D

#+BEGIN_SRC emacs-lisp
  (use-package d-mode
    :ensure t
    :defer t
    :mode "\\.d\\'")
#+END_SRC

** Dhall

#+BEGIN_SRC emacs-lisp
  (use-package dhall-mode
    :ensure t
    :mode "\\.dhall\\'")
#+END_SRC

** Dockerfile

#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t
    :defer t
    :mode "\\Dockerfile\\'")
#+END_SRC

** Elisp

Disable those silly docstring warnings when editing elisp.

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'flycheck
    (add-to-list 'flycheck-disabled-checkers 'emacs-lisp-checkdoc))
#+END_SRC

** Go

This is the /really/ trendy part of my config.

#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t
    :defer t
    :mode "\\*.go\\'"
    :init
    (add-hook 'before-save-hook 'gofmt-before-save)
    (local-set-key (kbd "M-.") 'godef-jump)
    (add-hook 'go-mode-hook (lambda ()
			      (set (make-local-variable 'company-backends) '(company-go))
			      (company-mode))))

  (use-package company-go
    :ensure t)
#+END_SRC

** Groovy

Pretty much just for Jenkins files.

#+BEGIN_SRC emacs-lisp
  (use-package groovy-mode
    :ensure t
    :defer t
    :mode "\\Jenkinsfile\\'")
#+END_SRC

** Haskell

#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :defer t
    :mode "\\.hs\\'")
#+END_SRC

** HTML

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :defer t
    :mode ("\\.html\\'" "\\.jinja\\'")
    :config (setq web-mode-markup-indent-offset 2
		  web-mode-code-indent-offset 2))

  (use-package emmet-mode
    :ensure t
    :config (add-hook 'web-mode-hook 'emmet-mode))
#+END_SRC

** JavaScript

This is the web-scale portion of my config.

#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)
#+END_SRC

** Jsonnet

Install jsonnet mode.

#+BEGIN_SRC emacs-lisp
  (use-package jsonnet-mode
    :ensure t
    :defer t
    :mode ("\\.jsonnet\\'" "\\.libsonnet\\'"))
#+END_SRC

Add my own shim for formatting jsonnet because the language is in
shambles and this doesn't work out of the box.

#+BEGIN_SRC emacs-lisp
  (defun jsonnet-reformat-buffer ()
    "Reformat entire buffer using the Jsonnet format utility, except it actually works."
    (interactive)
    (call-process-region (point-min) (point-max) "jsonnetfmt" t t nil (buffer-file-name)))
#+END_SRC

#+RESULTS:
: jsonnet-reformat-buffer

** Log

Taken from [[https://writequit.org/articles/working-with-logs-in-emacs.html][Working with Log Files in Emacs]].

#+BEGIN_SRC emacs-lisp
  (use-package vlf :ensure t)

  (use-package log4j-mode
    :ensure t
    :defer t
    :mode "\\.log\\'")
#+END_SRC

** Lua

#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :ensure t
    :defer t
    :mode ("\\.lua\\'" "\\.p8\\'"))
#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (gfm-mode)
    :mode (("\\.md\\'" . gfm-mode)
	   ("\\.gfm\\'" . gfm-mode))
    :config (setq markdown-command "multimarkdown"
		  markdown-fontify-code-blocks-natively t))
#+END_SRC

** Nginx

#+BEGIN_SRC emacs-lisp
  (use-package nginx-mode
    :ensure t
    :defer t)
#+END_SRC

** Python

Install virtualenvwrapper support.

#+BEGIN_SRC emacs-lisp
  (use-package virtualenvwrapper
    :ensure t)
#+END_SRC

Let elpy do its thing.

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init (elpy-enable))
#+END_SRC

** Ruby
   
These are very much a work in progress.  I know about as much about
ruby as I know about scented candles and professional football.

#+BEGIN_SRC emacs-lisp
  (setq ruby-deep-indent-paren nil)
#+END_SRC

** Rust

#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :defer t
    :mode "\\.rs'")
#+END_SRC

** Text

Automatically "fill" text while editing.

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC

Turn on spell check.

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook #'(lambda () (flyspell-mode t)))
#+END_SRC

** Terraform

#+BEGIN_SRC emacs-lisp
  (use-package terraform-mode
    :ensure t
    :defer t
    :mode "\\.tf\\'")

  (use-package company-terraform
    :ensure t
    :init (company-terraform-init))
#+END_SRC

** Terminal

I'm a simple man, and I use a simple shell.

#+BEGIN_SRC emacs-lisp
  (defun recker/ansi-term ()
    (interactive)
    (ansi-term "/bin/bash"))
  (global-set-key (kbd "C-c e") 'eshell)
  (global-set-key (kbd "C-x t") 'recker/ansi-term)
#+END_SRC

The terminal buffer should be killed on exit.
   
#+BEGIN_SRC emacs-lisp
  (defadvice term-handle-exit
      (after term-kill-buffer-on-exit activate)
    (kill-buffer))
#+END_SRC

Aliases for eshell

#+BEGIN_SRC emacs-lisp
  (defalias 'ff #'find-file)
#+END_SRC

** Typescript

#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :ensure t
    :defer t
    :mode "\\.ts\\'")
#+END_SRC

** YAML

#+BEGIN_SRC emacs-lisp
  (use-package indent-guide
    :ensure t
    :init (add-hook 'yaml-mode-hook 'indent-guide-mode))

  (use-package yaml-mode
    :ensure t
    :defer t
    :mode ("\\.yml\\'" "\\.sls\\'" "\\.yml.j2\\'")
    :init
    (add-hook 'yaml-mode-hook 'turn-off-auto-fill))
#+END_SRC

* Org

#+BEGIN_SRC emacs-lisp
(use-package org-mode
  :mode "\\.org$")
#+END_SRC

** Editing

Render blank lines between collapsed headings.

#+BEGIN_SRC emacs-lisp
  (setq org-cycle-separator-lines 1)
#+END_SRC

Insert blank lines between headings by default.

#+BEGIN_SRC emacs-lisp
  (setq org-blank-before-new-entry '((heading . t) (plain-list-item . auto)))
#+END_SRC

Set attachments directory.

#+BEGIN_SRC emacs-lisp
  (setq org-attach-directory (recker/path 'docs "attachments/"))
#+END_SRC

Delete attachments when archiving something, since everything is
stored in git anyway.

#+BEGIN_SRC emacs-lisp
  (setq org-attach-archive-delete 't)
#+END_SRC

** Capture

Set-up org capture for quickly adding text to notes.

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates '())
#+END_SRC

Bind =org-capture= to a fast, slick keybinding.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

** Agenda

Use the local documents folder as the agenda root.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (list (recker/path 'docs)))
#+END_SRC

Give =org-agenda= a slick keybinding so I can quickly check it while
working on something else.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC

While browsing the agenda, default to follow mode - which higlights
the item in your notes while you scan through the agenda.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-start-with-follow-mode t)
#+END_SRC

By default, exclude anything that was archived.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-tag-filter-preset '("-ARCHIVE"))
#+END_SRC

Set up some custom agenda views.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands '())
#+END_SRC

** Babel

Live dangerously.  Tell org to run code blocks without confirmation.

#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

Add some languages!

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (ruby . t)
     (shell . t)))
#+END_SRC

** Exporting

Set up some publishing projects.

#+BEGIN_SRC emacs-lisp
  (setq org-publish-project-alist '())
#+END_SRC

* Gnus

Gnus has a steep learning curve, and learning to incorporate this
mysterious program has proven to be an emotional roller coaster. I’m
not even sure I know enough about it to say “it’s worth it”, but
hopefully this will help you with your own journey.

** Better Startup

Gnus requires a “primary method” from which you obtain
news. Unfortunately, the program kind of explodes if this isn’t set,
which proves to be kind of a pain when you want to poke around and set
up things interactively.

Here’s my workaround - set the primary method to a dummy protocol that
will immediately come back. In our case, this is a blank nnml stream.

#+BEGIN_SRC emacs-lisp
  (setq gnus-select-method '(nnml ""))
#+END_SRC

Default on topic mode, since it’s more helpful.

#+BEGIN_SRC emacs-lisp
  (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
#+END_SRC

Change path to =newsrc= config file.

#+BEGIN_SRC emacs-lisp
  (setq gnus-startup-file (recker/path 'docs "emacs/newsrc"))
#+END_SRC

Don't keep a dribble file.

#+BEGIN_SRC emacs-lisp
  (setq gnus-use-dribble-file nil)
#+END_SRC

Enable the asynchronous flag.

#+BEGIN_SRC emacs-lisp
  (setq gnus-asynchronous t)
#+END_SRC

More possible placebo code to make gnus feel faster - use the cache.

#+BEGIN_SRC emacs-lisp
  (setq gnus-use-cache t)
#+END_SRC

** Better Folders

Gnus creates a bunch of folders in your home directory that, as far as
I can tell, are not needed outside of gnus. I've finally managed to
wrangle enough variables to tell gnus to save everything in the gnus
folder.  I save mine off in a version controlled "docs" directory.

#+BEGIN_SRC emacs-lisp
  (setq gnus-home-directory (recker/path 'docs "emacs/gnus")
	nnfolder-directory (recker/path 'docs "emacs/gnus/Mail/archive")
	message-directory (recker/path 'docs "emacs/gnus/Mail")
	nndraft-directory (recker/path 'docs "emacs/gnus/Drafts")
	gnus-cache-directory (recker/path 'docs "emacs/gnus/cache"))
#+END_SRC

** Reading News

Use gmane and gwene to follow news, mailers, and tons of other
syndicated things. There are even comics.

#+BEGIN_SRC emacs-lisp
  (setq gnus-secondary-select-methods '())
#+END_SRC

** Reading Mail

Add a personal IMAP account.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'gnus-secondary-select-methods
	       '(nnimap "personal"
			(nnimap-address "imap.gmail.com")
			(nnimap-server-port "imaps")
			(nnimap-stream ssl)
			(nnmail-expiry-target "nnimap+gmail:[Gmail]/Trash")
			(nnmail-expiry-wait immediate)))
#+END_SRC

** Sending Mail

Don't attempt to archive outbound emails to groups.

#+BEGIN_SRC emacs-lisp
  (setq gnus-message-archive-group nil)
#+END_SRC

Keep addresses locally using =bbdb=.

#+BEGIN_SRC emacs-lisp
  (use-package bbdb
    :ensure t
    :config (setq bbdb-file (recker/path 'docs "emacs/bbdb.el"))
    :init
    (bbdb-mua-auto-update-init 'message)
    (setq bbdb-mua-auto-update-p 'query)
    (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus))
#+END_SRC

SMTP settings.

#+BEGIN_SRC emacs-lisp
  (setq smtpmail-smtp-service 587
	smtpmail-smtp-user "alex@reckerfamily.com"
	smtpmail-smtp-server "smtp.gmail.com"
	send-mail-function 'smtpmail-send-it)
#+END_SRC

I keep an encrypted authinfo in my docs under version control.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auth-sources (recker/path 'docs "emacs/authinfo.gpg"))
#+END_SRC

Here's what it looks like.

#+BEGIN_EXAMPLE
  machine imap.gmail.com login alex@reckerfamily.com password <password> port imaps
  machine smtp.gmail.com login alex@reckerfamily.com password <password> port 587
#+END_EXAMPLE

* Miscellaneous

** Tools

#+BEGIN_SRC emacs-lisp
  (use-package dictionary :ensure t)

  (use-package request :ensure t)

  (use-package transmission :ensure t)
#+END_SRC

Write good.

#+BEGIN_SRC emacs-lisp
(use-package writegood-mode
  :ensure t
  :init (add-hook 'org-mode-hook 'writegood-mode))
#+END_SRC

Start a server to listen for =emacsclient=.

#+BEGIN_SRC emacs-lisp
  (require 'server)
  (unless (server-running-p)
    (server-start))
#+END_SRC

Mutt, for work email.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("/mutt" . mail-mode))
#+END_SRC

** Games

#+BEGIN_SRC emacs-lisp
  (setq tetris-score-file (recker/path 'docs "emacs/tetris-scores"))
#+END_SRC

** Functions

These are miscellaneous functions that I’ve written (or plagiarized).

#+BEGIN_SRC emacs-lisp
  (defun recker/purge-buffers ()
    "Delete all buffers, except for *scratch*."
    (interactive)
    (mapc #'(lambda (b) (unless (string= (buffer-name b) "*scratch*") (kill-buffer b))) (buffer-list)))

  (defun recker/unfill-region (beg end)
    "Unfill the region, joining text paragraphs into a single logical line."
    (interactive "*r")
    (let ((fill-column (point-max)))
      (fill-region beg end)))

  (defun recker/org-scratch ()
    "Open a org mode *scratch* pad."
    (interactive)
    (switch-to-buffer "*org scratch*")
    (org-mode)
    (insert "#+TITLE: Org Scratch\n\n"))

  (defun recker/sudo (file-name)
    "find-file, as sudo."
    (interactive "Fsudo Find file:")
    (let ((tramp-file-name (concat "/sudo::" (expand-file-name file-name))))
      (find-file tramp-file-name)))

  (defun recker/do-fancy-equal-thingy (beg end)
    (interactive "r")
    (align-regexp beg end "\\(\\s-*\\)\\ =" 1 0 t))

  (defun recker/encrypt-with-ssh (public-key-path)
    (interactive "fPublic Key Path: ")
    (let* ((pem (shell-command-to-string (format "ssh-keygen -f %s -e -m PKCS8" public-key-path)))
	   (secret (read-passwd "Secret String: "))
	   (encrypt-command
	    (format "openssl rsautl -ssl -encrypt -pubin -inkey <(echo \"%s\") -ssl -in <(echo \"%s\") | base64" pem secret))
	   (hash (shell-command-to-string encrypt-command))
	   (decrypt-command
	    (format "echo \"%s\" | base64 -D | openssl rsautl -decrypt -inkey ~/.ssh/id_rsa" hash)))
      (kill-new decrypt-command nil)
      (message "Decrypt command added to kill ring.")))

  (defun recker/docs-sync ()
    (interactive)
    (save-window-excursion
      (async-shell-command (format "git-sync -d %s" (recker/path 'docs)) nil nil)))

  (defun find-first-non-ascii-char ()
    "Find the first non-ascii character from point onwards."
    (interactive)
    (let (point)
      (save-excursion
	(setq point
	      (catch 'non-ascii
		(while (not (eobp))
		  (or (eq (char-charset (following-char))
			  'ascii)
		      (throw 'non-ascii (point)))
		  (forward-char 1)))))
      (if point
	  (goto-char point)
	(message "No non-ascii characters."))))

  (defun recker/today ()
    "Open today's journal entry."
    (interactive)
    (let ((target
	   (recker/path 'src (format-time-string "blog/_posts/%Y-%m-%d-%Y-%m-%d.html.md"))))
      (find-file target)))
#+END_SRC

** Keybindings

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c b") 'browse-url)
  (global-set-key (kbd "C-c d") 'recker/docs-sync)
  (global-set-key (kbd "C-c l") 'sort-lines)
  (global-set-key (kbd "C-c n") 'recker/org-scratch)
  (global-set-key (kbd "C-c r") 'replace-string)
  (global-set-key (kbd "C-c t") 'recker/today)
  (global-set-key (kbd "C-x C-k k") 'kill-buffer)
  (global-set-key (kbd "C-x P") 'recker/purge-buffers)
  (global-set-key (kbd "C-x k") 'kill-this-buffer)
  (global-set-key (kbd "C-x p") 'recker/pass-to-clip)
  (global-set-key (kbd "C-x w") 'recker/pass-to-clip-work)
  (global-set-key (kbd "C-x |") 'recker/do-fancy-equal-thingy)
#+END_SRC

** Local

Emacs sometimes dumps things in =init.el=.  It means well, but I would
rather this be in a different file ignored by git.

#+BEGIN_SRC emacs-lisp
  (let ((custom (recker/path 'emacs "custom.el")))
    (unless (file-exists-p custom)
      (with-temp-buffer
	(write-file custom)))
    (setq custom-file custom))
#+END_SRC

I also like to keep a file around for miscellaneous elisp that should
run on startup.  This is for machine specific settings or things I am
still tinkering with.

#+BEGIN_SRC emacs-lisp
  (let ((local (recker/path 'emacs "local.el")))
    (unless (file-exists-p local)
      (with-temp-buffer
	(insert ";; This file is for local changes")
	(write-file local)))
    (load local))
#+END_SRC
