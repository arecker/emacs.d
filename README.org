#+TITLE: Emacs Configuration
#+AUTHOR: Alex Recker
#+OPTIONS: num:nil
#+STARTUP: showall

Welcome to my personal emacs configuration!  Feel free to re-use
anything you'd like.  If you have any questions, send me an email at
[[mailto:alex@reckerfamily.com][alex@reckerfamily.com]] or leave an issue with this github repository.

* Personal

Personal identifying information.  Please don't re-use anything from
this section - we wouldn't want to confuse my mother.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Alex Recker"
      user-mail-address "alex@reckerfamily.com")
#+END_SRC

* Environment

Use the =exec-path-from-shell= package to sync up =PATH= between the
shell and emacs.

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config (exec-path-from-shell-initialize))
#+END_SRC

The following functions are used throughout the rest of my
configuration.

#+BEGIN_SRC emacs-lisp
  (defun recker/macos-p ()
    "Returns T if running on MacOS."
    (string-equal system-type "darwin"))

  (defun recker/path (dir &optional subpath)
    "Build a path name relative to the home directory."
    (let* ((macos-p (recker/macos-p))
	   (dir (pcase dir
		  ('home "~")
		  ('desktop (if macos-p "~/Desktop" "~/desktop"))
		  ('docs (if macos-p "~/Documents" "~/docs"))
		  ('pics (if macos-p "~/Pictures" "~/pics"))
		  ('public (if macos-p "~/Public" "~/public"))
		  ('src "~/src")
		  ('emacs user-emacs-directory)
		  (_ (error (format "no %s directory!" dir)))))
	   (subdir (or subpath "")))
      (expand-file-name (concat (file-name-as-directory dir) subpath))))
#+END_SRC

Set the default home directory.

#+begin_src emacs-lisp
(setq default-directory (recker/path 'home))
#+end_src

Source auth sources from docs.

#+begin_src emacs-lisp
(add-to-list 'auth-sources (recker/path 'docs "emacs/authinfo.gpg"))
#+end_src

Dump customize's changes to a file ignored by version control.

#+begin_src emacs-lisp
  (let ((custom-path (recker/path 'emacs "custom.el")))
    (unless (file-exists-p custom-path)
      (write-region ";; custom.el" nil custom-path))
    (setq custom-file custom-path))
#+end_src

* Interface

Some people like the extra screen space, but personally I think they
look kind of retro and cozy.

#+BEGIN_SRC emacs-lisp
(menu-bar-mode t)
(tool-bar-mode t)
(when (display-graphic-p)
  (scroll-bar-mode t))
#+END_SRC

#+RESULTS:
: right

Use the more mellow =*scratch*= screen at the starting buffer.

#+begin_src emacs-lisp
(setq inhibit-startup-message 't)
#+end_src

Use a custom hook on killing buffers to make =*scratch*= unkillable.

#+begin_src emacs-lisp
(defun recker/dont-kill-scratch ()
  "Return NIL if the current buffer is the *scratch* buffer."
  (not (equal (buffer-name (current-buffer)) "*scratch*")))
(add-hook 'kill-buffer-query-functions 'recker/dont-kill-scratch)
#+end_src

Overwrite the selected text.

#+begin_src emacs-lisp
(delete-selection-mode t)
#+end_src

Avoid tabs.

#+begin_src emacs-lisp
(setq indent-tabs-mode nil)
#+end_src

Enable IDO mode and try to use it everywhere.  It's a strange
interface at first, but you grow to appreciate the consistency.

#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
#+END_SRC

Make it vertical.

#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :config (setq ido-vertical-define-keys 'C-n-and-C-p-only)
    :init (ido-vertical-mode))
#+end_src

Install idomenu as well.

#+begin_src emacs-lisp
(use-package idomenu
  :ensure t
  :bind ("C-c i" . idomenu))
#+end_src

#+RESULTS:
: idomenu

Use smex as a smarter replacement for the =M-x= menu.

#+begin_src emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind (("M-x" . 'smex)
	   ("M-X" . 'smex-major-mode-commands)))
#+end_src

#+RESULTS:
: smex-major-mode-commands

By default, emacs will display the major mode as well as all active
minor modes in the modeline.  I think it clutters up the file
information so I use this nifty plugin to hide it all.  Only the major
mode is displayed.

#+BEGIN_SRC emacs-lisp
(use-package rich-minority
  :ensure t
  :init (rich-minority-mode 1)
  :config (setq rm-blacklist ""))
#+END_SRC

Use company mode for completion.

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init (add-hook 'after-init-hook 'global-company-mode))
#+end_src

#+RESULTS:

* Buffers

Purge all buffers with =C-x P=.

#+begin_src emacs-lisp
  (defun recker/purge-buffers ()
    "Delete all buffers, except for *scratch*."
    (interactive)
    (mapc #'(lambda (b) (unless (string= (buffer-name b) "*scratch*") (kill-buffer b))) (buffer-list)))
(global-set-key (kbd "C-x P") 'recker/purge-buffers)
#+end_src

Kill buffers without confirming.

#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-k k") 'kill-buffer)
(global-set-key (kbd "C-x k") 'kill-this-buffer)
#+end_src

* Font

I like to set aside a regular font and a larger version of the same
font for things like screen shares.

#+BEGIN_SRC emacs-lisp
  (setq-default recker/regular-font (if (recker/macos-p)
					"Monaco 16"
				      "Inconsolata 13"))

  (setq-default recker/large-font (if (recker/macos-p)
				      "Monaco 20"
				    "Inconsolata 18"))
#+END_SRC

Set the regular font if emacs is running in graphics mode.

#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
  (set-frame-font recker/regular-font nil t))
#+END_SRC

I use a custom keybound function to toggle between my regular and
large font.

#+BEGIN_SRC emacs-lisp
  (defun recker/toggle-font-size ()
    (interactive)
    (unless (display-graphic-p)
      (error "Running in -nw mode, font won't work"))
    (let* ((current-font-obj (face-attribute 'default :font))
	   (current-font (format "%s %s"
				 (font-get current-font-obj :family)
				 (font-get current-font-obj :size)))
	   (desired-font (if (string-equal current-font recker/regular-font)
			     recker/large-font
			   recker/regular-font)))
      (set-frame-font (progn (message "Changing font to %s" desired-font) desired-font) t t)))

  (global-set-key (kbd "C-c C-x f") 'recker/toggle-font-size)
#+END_SRC

* Files

Don't automatically make backup files.

#+begin_src emacs-lisp
(setq make-backup-files nil
      auto-save-default nil)
#+end_src

Automatically revert buffer if file changes.

#+begin_src emacs-lisp
(global-auto-revert-mode 1)
#+end_src

Configure **dired**, the emacs file manager.

#+begin_src emacs-lisp
(require 'dired-x)
(setq-default dired-omit-files-p t)
(setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))
(setq dired-listing-switches "-lh")
(setq dired-use-ls-dired nil)
(setq dired-clean-confirm-killing-deleted-buffers nil)
#+end_src

#+RESULTS:

Map a few file registers.

#+begin_src emacs-lisp
  (set-register ?b `(file . ,(recker/path 'src "blog")))
  (set-register ?c '(file . "/ssh:console:/home/alex"))
  (set-register ?d `(file . ,(recker/path 'desktop)))
  (set-register ?e `(file . ,(recker/path 'emacs "README.org")))
  (set-register ?l `(file . ,(recker/path 'emacs "local.el")))
  (set-register ?n '(file . "/ssh:alex@nas.local:/volume1/homes/alex/"))
  (set-register ?o `(file . ,(recker/path 'docs "opsat.org")))
#+end_src

Configure bookmarks.

#+begin_src emacs-lisp
(require 'bookmark)
(setq bookmark-save-flag 1
      bookmark-default-file (recker/path 'docs "emacs/bookmarks.el"))

(defun recker/ido-bookmark-jump (bookmark)
  "*Switch to bookmark BOOKMARK interactively using `ido'."
  (interactive (list (ido-completing-read "Bookmark: " (bookmark-all-names) nil t)))
  (bookmark-jump bookmark))

(global-set-key (kbd "C-x r b") 'recker/ido-bookmark-jump)
#+end_src

#+RESULTS:
: recker/ido-bookmark-jump

Search files within a project with projectile mode.

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :config
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (setq projectile-completion-system 'ivy)
  :init (projectile-mode t))
#+end_src

* Version Control

Follow symlinks.

#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC

Magit is a wonderful plugin.  Honestly, it just gets it so right with
the quick, intuitive interface.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind
  ("C-x g" . magit-status)
  ("C-c m" . magit-blame))
#+END_SRC

#+RESULTS:
: magit-blame

* Tools

Dig

#+begin_src emacs-lisp
(global-set-key (kbd "C-c d") 'dig)
#+end_src

#+RESULTS:
: dig

Dictionary

#+begin_src emacs-lisp
(use-package dictionary :ensure t)
#+end_src

_SWIPER NO SWIPING_.

#+begin_src emacs-lisp
(use-package swiper
  :ensure t
  :bind ("C-c s" . swiper))
#+end_src

#+RESULTS:
: swiper

Incrementally select intelligent portions of text the with
=expand-region= shortcut.

#+begin_src emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region))
#+end_src

Flycheck for angry red squiggles.

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode))
#+end_src

#+RESULTS:

Install yasnippet.

#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :init (add-hook 'prog-mode-hook #'yas-minor-mode))
#+end_src

#+RESULTS:

* Passwords

I use the =pass= tool for personal secret management.  It's my own
crummy implementation.

#+begin_src emacs-lisp
(defun recker/pass-directory ()
  (or (bound-and-true-p recker/active-pass-directory)
      (expand-file-name "~/.password-store")))

(defun recker/pass--file-to-entry (path)
  (file-name-sans-extension
   (file-relative-name path (recker/pass-directory))))

(defun recker/pass-list-entries ()
  (mapcar
   #'recker/pass--file-to-entry
   (directory-files-recursively (recker/pass-directory) ".gpg")))

(defun recker/pass-to-string (path)
  (first
   (split-string
    (shell-command-to-string
     (format "PASSWORD_STORE_DIR=\"%s\" pass \"%s\" | head -1" (recker/pass-directory) path))
    "\n")))

(defun recker/pass-to-clip (path)
  (interactive (list (completing-read "Password: " (recker/pass-list-entries) nil t)))
  (shell-command
   (format "PASSWORD_STORE_DIR=\"%s\" pass -c \"%s\"" (recker/pass-directory) path)))

(defun recker/pass-to-clip-work ()
  (interactive)
  (let ((recker/active-pass-directory (expand-file-name "~/.password-store-work")))
    (funcall-interactively #'recker/pass-to-clip (completing-read "Password: " (recker/pass-list-entries) nil t))))

(global-set-key (kbd "C-x p") 'recker/pass-to-clip)
(global-set-key (kbd "C-x w") 'recker/pass-to-clip-work)
#+end_src

* Terminal

Use bash for launching a terminal and bind my custom wrapper function
to =C-x t=.

#+begin_src emacs-lisp
(defun recker/ansi-term ()
  (interactive)
  (ansi-term "/bin/bash"))

(global-set-key (kbd "C-x t") 'recker/ansi-term)
#+end_src

On exiting a terminal, also kill the buffer.

#+begin_src emacs-lisp
(defadvice term-handle-exit
    (after term-kill-buffer-on-exit activate)
  (kill-buffer))
#+end_src

Eshell too.

#+begin_src emacs-lisp
(global-set-key (kbd "C-c e") 'eshell)
#+end_src

#+RESULTS:
: eshell

* Major Modes

In any case, default to what's specified in the projects editorconfig.

#+begin_src emacs-lisp
(use-package editorconfig
  :ensure t
  :defer t
  :config (editorconfig-mode 1))
#+end_src

#+RESULTS:

** C

This is a snippet adapted from the [[https://www.kernel.org/doc/html/v4.10/process/coding-style.html][Linux kernel coding style]] - a
surpisingly good and funny read.

#+begin_src emacs-lisp
(defun c-lineup-arglist-tabs-only (ignored)
  "Line up argument lists by tabs, not spaces"
  (let* ((anchor (c-langelem-pos c-syntactic-element))
	 (column (c-langelem-2nd-pos c-syntactic-element))
	 (offset (- (1+ column) anchor))
	 (steps (floor offset c-basic-offset)))
    (* (max steps 1)
       c-basic-offset)))

(add-hook 'c-mode-common-hook
	  (lambda ()
	    (c-add-style
	     "linux-tabs-only"
	     '("linux" (c-offsets-alist
			(arglist-cont-nonempty
			 c-lineup-gcc-asm-reg
			 c-lineup-arglist-tabs-only))))))

(add-hook 'c-mode-hook (lambda ()
			 (setq indent-tabs-mode t)
			 (setq show-trailing-whitespace t)
			 (c-set-style "linux-tabs-only")))
#+end_src

** Common Lisp

Set up the slime common lisp developing environment.

#+begin_src emacs-lisp
  (use-package slime
    :ensure t
    :defer t
    :config (setq inferior-lisp-program (executable-find "sbcl")))

  (use-package slime-company
    :ensure t
    :after (slime company)
    :config (setq slime-company-completion 'fuzzy
		  slime-company-after-completion 'slime-company-just-one-space))
#+end_src

#+RESULTS:
: t

** D

Yeah, there's a D language apparently.

#+begin_src emacs-lisp
(use-package d-mode
  :ensure t
  :defer t
  :mode "\\.d\\'")
#+end_src

** Dockerfile

Yes, there's even a mode for editing dockerfiles.

#+begin_src emacs-lisp
(use-package dockerfile-mode
  :ensure t
  :defer t
  :mode ("\\Dockerfile\\'" "\\.dockerfile\\'"))
#+end_src

** Go

Haven't really gotten into go, but I have to work on Kubernetes
operators sometimes.

#+begin_src emacs-lisp
(use-package go-mode
  :ensure t
  :defer t
  :config (let ((govet (flycheck-checker-get 'go-vet 'command)))
	    (when (equal (cadr govet) "tool")
	      (setf (cdr govet) (cddr govet)))))   
#+end_src

** Groovy

Mostly for editing Jenkinsfiles at work.

#+begin_src emacs-lisp
(use-package groovy-mode
  :ensure t
  :defer t
  :mode ("\\Jenkinsfile\\'" "\\.groovy\\'"))
#+end_src

** Haskell

Haskell mode, in case I ever decide to grow my neckbeard out.

#+begin_src emacs-lisp
(use-package haskell-mode
  :ensure t
  :defer t
  :mode "\\.hs\\'")
#+end_src

** HTML

Use emmet mode to crank out the HTML tags.

#+begin_src emacs-lisp
(use-package emmet-mode
  :ensure t
  :defer t
  :init (setq emmet-preview-default nil)
  :config (add-hook 'sgml-mode-hook 'emmet-mode))   
#+end_src

#+RESULTS:

Some custom HTML writing functions.  I'll probably move them to
yasnippet once I can figure it out.

#+begin_src emacs-lisp
(defun recker/filename-to-alt (filename)
  "Convert a filepath to an HTML alt attribute."
  (let ((name (file-name-sans-extension filename))
	(chars '(?_ ?- ?/)))
    (dolist (char chars)
      (setf name (subst-char-in-string char ?\s name)))
    name))

(defun recker/insert-figure (filename caption)
  "Insert an HTML figure and caption."
  (interactive "sFilename: 
sCaption: ")
  (message "%s" caption)
  (let* ((src (format "/images/%s" filename))
	 (alt (recker/filename-to-alt filename))
	 (img (format "<a href=\"%s\">\n<img alt=\"%s\" src=\"%s\"/>\n</a>" src alt src))
	 (figcaption (if (not (string-equal caption ""))
			 (format "<figcaption>\n<p>%s</p>\n</figcaption>" caption))))
    (insert
     (if (string-equal caption "")
	 (format "<figure>\n%s\n</figure>" img)
       (format "<figure>\n%s\n%s\n</figure>" img figcaption)))))
#+end_src

** Javascript

As you can tell I write a lot of Javascript.  Just look at all these
options I've collected over the years.

#+begin_src emacs-lisp
(setq js-indent-level 2)
#+end_src

** Jsonnet

For working with the [[https://jsonnet.org/][Jsonnet]] configuration language.

#+begin_src emacs-lisp
(use-package jsonnet-mode
  :ensure t
  :defer t
  :mode ("\\.jsonnet\\'" "\\.libsonnet\\'"))
#+end_src

** Lua

For pico8 games and pandoc extensions.

#+begin_src emacs-lisp
(use-package lua-mode
  :ensure t
  :defer t
  :mode ("\\.lua\\'" "\\.p8\\'"))
#+end_src

** Markdown

Markdown, bleh.

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src

** Python

Elpy is pretty full featured, just let it do its thing.

#+begin_src emacs-lisp
  (use-package elpy
    :ensure t
    :defer t
    :config (setq elpy-rpc-virtualenv-path 'current)
    :init (advice-add 'python-mode :before 'elpy-enable))
#+end_src

#+RESULTS:

** reStructuredText

I intend to give [[https://docutils.sourceforge.io/rst.html][reStructuredText]] a serious try someday, it looks
pretty cool.

#+begin_src emacs-lisp
  (use-package rst
    :ensure t
    :defer t
    :mode (("\\.rst$" . rst-mode)))
#+end_src

#+RESULTS:
: ((\.rst$ . rst-mode) (\.yaml\' . yaml-mode) (\.yml\' . yaml-mode) (\.tf\' . terraform-mode) (\.p8\' . lua-mode) (\.hs\' . haskell-mode) (\.groovy\' . groovy-mode) (\Jenkinsfile\' . groovy-mode) (\.dockerfile\' . dockerfile-mode) (\Dockerfile\' . dockerfile-mode) (\.d\' . d-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.d[i]?\' . d-mode) (Dockerfile\(?:\..*\)?\' . dockerfile-mode) (go\.mod\' . go-dot-mod-mode) (\.go\' . go-mode) (Jenkinsfile . groovy-mode) (\.g\(?:ant\|roovy\|radle\)\' . groovy-mode) (\.hsc\' . haskell-mode) (\.l[gh]s\' . haskell-literate-mode) (\.hsig\' . haskell-mode) (\.[gh]s\' . haskell-mode) (\.cabal\'\|/cabal\.project\|/\.cabal/config\' . haskell-cabal-mode) (\.chs\' . haskell-c2hs-mode) (\.ghci\' . ghci-script-mode) (\.dump-simpl\' . ghc-core-mode) (\.hcr\' . ghc-core-mode) (\.libsonnet\' . jsonnet-mode) (\.jsonnet\' . jsonnet-mode) (\.lua\' . lua-mode) (/git-rebase-todo\' . git-rebase-mode) (\.tf\(vars\)?\' . terraform-mode) (\.nomad\' . hcl-mode) (\.hcl\' . hcl-mode) (\.\(e?ya?\|ra\)ml\' . yaml-mode) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs]\.dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-bsdmake-mode) (\.make\' . makefile-bsdmake-mode) (GNUmakefile\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-bsdmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

** Ruby

I like ruby, I just strangely don't have a lot of customizations for
working with it.

#+begin_src emacs-lisp
  (setq ruby-deep-indent-paren nil)
#+end_src

** Terraform

Package for working with [[https://www.terraform.io/][terraform]].

#+begin_src emacs-lisp
  (use-package terraform-mode
    :ensure t
    :defer t
    :mode "\\.tf\\'")
#+end_src

** Text

Configure spelling.

#+begin_src emacs-lisp
(setq ispell-personal-dictionary (recker/path 'docs "emacs/ispell.dict"))
(setq ispell-program-name (executable-find "ispell"))
(add-hook 'text-mode-hook #'(lambda () (flyspell-mode t)))
#+end_src

Auto-fill text while writing, and check spelling of course.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'turn-on-auto-fill)
(add-hook 'gfm-mode-hook 'turn-on-auto-fill)
(add-hook 'rst-mode-hook 'turn-on-auto-fill)
#+end_src

#+RESULTS:
| turn-on-auto-fill |

The =write-good= package so I can learn to write more gooder.

#+begin_src emacs-lisp
(use-package writegood-mode
  :ensure t
  :defer t
  :init
  (add-hook 'org-mode-hook 'writegood-mode)
  (add-hook 'gfm-mode-hook 'writegood-mode))
#+end_src

#+RESULTS:

** YAML

I hate being a YAML engineer it's awesome.

#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure t
  :defer t
  :mode ("\\.yml\\'" "\\.yaml\\'"))   
#+end_src

* Org

Make sure =org-tempo= is loaded so shortcuts work for code blocks, I
guess.  This is a recent workaround.

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

#+RESULTS:
: org-tempo

Use =C-c n= to open a scratch buffer for playing around in org mode.

#+begin_src emacs-lisp
(defun recker/org-scratch ()
  "Open a org mode scratch pad."
  (interactive)
  (switch-to-buffer "*org scratch*")
  (org-mode)
  (insert "#+TITLE: Org Scratch\n\n"))

(global-set-key (kbd "C-c n") 'recker/org-scratch)
#+end_src

Run **code blocks** interactively without the confirmation prompt each
time.  Set up some languages.

#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((java . t)
     (perl . t)
     (python . t)
     (ruby . t)
     (shell . t)))
#+end_src

Space out headlines when in collapsed view, and add a space after headers.

#+begin_src emacs-lisp
(setq org-cycle-separator-lines 1)
(setq org-blank-before-new-entry '((heading . t) (plain-list-item . auto)))
#+end_src

Configure **capture templates** and map the selector to =C-c c=.

#+begin_src emacs-lisp
(setq org-capture-templates '())
(global-set-key (kbd "C-c c") 'org-capture)
#+end_src

Configure **agenda** and set up and map the view to =C-c a=.

#+begin_src emacs-lisp
(setq org-agenda-files (list (recker/path 'docs)))
(setq org-agenda-start-with-follow-mode t)
(global-set-key (kbd "C-c a") 'org-agenda)
(setq org-agenda-custom-commands '())
(setq org-agenda-tag-filter-preset '("-ARCHIVE"))
#+end_src

Configure **attachments**.

#+begin_src emacs-lisp
(setq org-attach-directory (recker/path 'docs "attachments/"))
(setq org-attach-archive-delete 't)
#+end_src

Configure **publish projects**.

#+begin_src emacs-lisp
(setq org-publish-project-alist '())
#+end_src

Install htmlize for sweet snyntax highlighting on HTML exports.

#+begin_src emacs-lisp
(use-package htmlize :ensure t)
#+end_src

#+RESULTS:

Open up a new blog post.

#+begin_src emacs-lisp
(defun recker/today ()
  "Open today's journal entry."
  (interactive)
  (let* ((target
	  (recker/path 'src (format-time-string "blog/entries/%Y-%m-%d.md")))
	 (frontmatter
	  (format-time-string "---\ntitle:\nbanner: %Y-%m-%d.jpg\n---\n\n")))
    (if (file-exists-p target)
	(find-file target)
      (progn (find-file target)
	     (insert frontmatter)))))
(global-set-key (kbd "C-c t") 'recker/today)
#+end_src

#+RESULTS:
: recker/today

* Gnus

Odd, but fulfilling.  Here is my sordid configuration.  Set up some
empty primary and secondary methods.

#+begin_src emacs-lisp
(setq gnus-select-method '(nnml ""))
(setq gnus-secondary-select-methods '())
#+end_src

Use topic mode by default.

#+begin_src emacs-lisp
(add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
#+end_src

Hide startup files and directories in my documents.

#+begin_src emacs-lisp
(setq gnus-startup-file (recker/path 'docs "emacs/newsrc"))
(setq gnus-home-directory (recker/path 'docs "emacs/gnus")
      nnfolder-directory (recker/path 'docs "emacs/gnus/Mail/archive")
      message-directory (recker/path 'docs "emacs/gnus/Mail")
      nndraft-directory (recker/path 'docs "emacs/gnus/Drafts")
      gnus-cache-directory (recker/path 'docs "emacs/gnus/cache"))
#+end_src

Enable the powerful placebo options.

#+begin_src emacs-lisp
(setq gnus-asynchronous t)
(setq gnus-use-cache t)
#+end_src

Don't dribble anywhere, that's gross.

#+begin_src emacs-lisp
(setq gnus-use-dribble-file nil)
#+end_src

Don't move archived messages anywhere.

#+begin_src emacs-lisp
(setq gnus-message-archive-group nil)
#+end_src

Use bbdb to store addresses.

#+begin_src emacs-lisp
(use-package bbdb
  :ensure t
  :config (setq bbdb-file (recker/path 'docs "emacs/bbdb.el"))
  :init
  (bbdb-mua-auto-update-init 'message)
  (setq bbdb-mua-auto-update-p 'query)
  (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus))
#+end_src

#+RESULTS:
: t

Configure **imap** settings.

#+begin_src emacs-lisp
(add-to-list 'gnus-secondary-select-methods
	     '(nnimap "personal"
		      (nnimap-address "imap.gmail.com")
		      (nnimap-server-port "imaps")
		      (nnimap-stream ssl)
		      (nnmail-expiry-target "nnimap+gmail:[Gmail]/Trash")
		      (nnmail-expiry-wait immediate)))
#+end_src

Configure **smtp** settings.

#+begin_src emacs-lisp
(setq smtpmail-smtp-service 587
      smtpmail-smtp-user "alex@reckerfamily.com"
      smtpmail-smtp-server "smtp.gmail.com"
      send-mail-function 'smtpmail-send-it)
#+end_src

* Functions

Rebind keys to some helpful existing functions.

#+begin_src emacs-lisp
(global-set-key (kbd "C-c r") 'replace-string)
(global-set-key (kbd "C-c l") 'sort-lines)
#+end_src

#+RESULTS:
: sort-lines

Some other helpful functions.

#+begin_src emacs-lisp
(defun recker/unfill-region (beg end)
  "Unfill the region, joining text paragraphs into a single logical line."
  (interactive "*r")
  (let ((fill-column (point-max)))
    (fill-region beg end)))
#+end_src

* Quotes

Display random quotes in the scratch buffer as an elisp comment.

#+name: scratch-quotes
|----------------------------------------------------------------------------------------------------------------------------+---------------------------|
| Sanity and happiness are an impossible combination.                                                                        | Mark Twain                |
| Trust thyself only, and another shall not betray thee.                                                                     | Thomas Fuller             |
| Fear has its uses but cowardice has none.                                                                                  | Mahatma Ghandi            |
| Happiness can exist only in acceptance.                                                                                    | George Orwell             |
| Seek respect mainly from thyself, for it comes first from within.                                                          | Steven H. Coogler         |
| Conscience is the dog that can't bite, but never stops barking.                                                            | Proverb                   |
| In general, pride is at the bottom of all great mistakes.                                                                  | Steven H. Coogler         |
| Anger as soon as fed is dead -- tis starving makes it fat.                                                                 | Emily Dickinson           |
| Make no judgements where you have no compassion.                                                                           | Anne McCaffrey            |
| Isolation is a self-defeating dream.                                                                                       | Carlos Salinas de Gortari |
| Doubt must be no more than vigilance, otherwise it can become dangerous.                                                   | George C. Lichtenberg     |
| Love is a willingless to sacrifice.                                                                                        | Michael Novak             |
| The value of identity is that so often with it comes purpose.                                                              | Richard R. Grant          |
| Discontent is the first necessity of progress.                                                                             | Thomas Edison             |
| Some of us think holding on makes us strong, but sometimes it is letting go.                                               | Herman Hesse              |
| Let not a man guard his dignity but let his dignity guard him.                                                             | Ralph Waldo Emerson       |
| Guilt: the gift that keeps on giving.                                                                                      | Erma Bombeck              |
| Be here now.                                                                                                               | Ram Dass                  |
| The master understands that the universe is forever out of control.                                                        | Lao Tzu                   |
| Our biggest problems arise from the avoidance of smaller ones.                                                             | James A. Lee Iacocca      |
| Honesty and transparency make you vulnerable.                                                                              | Mother Teresa             |
| If you do not ask the right questions, you do not get the right answers.                                                   | Edward Hodnett            |
| Resentment is like taking poison and waiting for the other person to die.                                                  | Malachy McCourt           |
| If we knew each other's  secrets, what comfort should we find.                                                             | John Churton Collins      |
| The mistake is thinking that there can be an antidote to the uncertainty.                                                  | David Levithan            |
| Cure sometimes, treat often, comfort always.                                                                               | Hippocrates               |
| Suspicion is a heavy armor and with its weight it impedes more than it protects.                                           | Robert Burns              |
| Sincerity, even if it speaks with a stutter, will sound eloquent when inspired.                                            | Eiji Yoshikawa            |
| I have little shame, no dignity - all in the name of a better cause.                                                       | A.J. Jacobs               |
| Truth may sometimes hurt, but delusion harms.                                                                              | Vanna Bonta               |
| Intuition is more important to discovery than logic.                                                                       | Henri Poincare            |
| How weird was it to drive streets I knew so well. What a different perspective.                                            | Suzanne Vega              |
| There can be no progress without head-on confrontation.                                                                    | Christopher Hitchens      |
| Sometimes it's necessary to go a long distance out of the way to come back a short distance correctly.                     | Edward Albea              |
| Stagnation is death. If you don't change, you die. It's that simple. It's that scary.                                      | Leonard Sweet             |
| In my opinion, actual heroism, like actual love, is a messy, painful, vulnerable business.                                 | John Green                |
| Maybe all one can do is hope to end up with the right regrets.                                                             | Arthur Miller             |
| If you have behaved badly, repent, make what amends you can and address yourself to the task of behaving better next time. | Aldous Huxley             |
| Sooner or later everyone sits down to a banquet of consequences.                                                           | Robert Louis Stevenson    |
| We are all in the same boat, in a stormy sea, and we owe each other a terrible loyalty.                                    | G.K. Chesterton           |
| In our quest for the answers of life we tend to make order out of chaos, and chaos out of order.                           | Jeffrey Fry               |
| There are many ways of going forward, but only one way of standing still.                                                  | Franklin D. Roosevelt     |
| Truth is outside of all patterns.                                                                                          | Bruce Lee                 |
| By imposing too great a responsibility, or rather, all responsibility, on yourself, you crush yourself.                    | Franz Kafka               |
| How few there are who have courage enough to own their faults, or resolution enough to mend them.                          | Benjamin Franklin         |
| Resistance is useless.                                                                                                     | Doctor Who                |
| Happiness does not depend on outward things, but on the way we see them.                                                   | Leo Tolstoy               |
| Being president is like being a jackass in a hailstorm.  There's nothing to do but to stand there and take it.             | Lyndon Johnson            |

#+begin_src emacs-lisp :var scratch-quotes=scratch-quotes
  (setq recker/scratch-quotes scratch-quotes)

  (defun recker/random-scratch-quote ()
    (interactive)
    (let* ((quotes recker/scratch-quotes)
	   (choice (nth (random (length quotes)) quotes))
	   (text (car choice))
	   (attribution (car (cdr choice))))
      (with-temp-buffer
	(lisp-mode)
	(newline)
	(insert (format "\"%s\"\n" text))
	(fill-region (point-min) (point-max))
	(insert (format "-- %s" attribution))
	(comment-region (point-min) (point-max))
	(dotimes (_ 2) (newline))
	(buffer-string))))

  (setq initial-scratch-message (recker/random-scratch-quote))
#+end_src

* Local

Finally, load any local overrides if they exist..

#+begin_src emacs-lisp
  (let ((local-path (recker/path 'emacs "local.el")))
    (if (file-exists-p local-path)
	(load-file local-path)))
#+end_src
