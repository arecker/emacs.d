#+TITLE: Emacs Configuration
#+SUBTITLE: I'm just a dude with a text editor
#+AUTHOR: Alex Recker
#+STARTUP: showeverything
#+OPTIONS: num:nil

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Alex Recker"
	user-mail-address "alex@reckerfamily.com")
#+END_SRC

* Startup

  Setup file registers, start the server, and if [[https://pypi.python.org/pypi/wilfred-say][wilfred-say]] or
  fortune is installed, display it in the ~*scratch*~ buffer.

  #+BEGIN_SRC emacs-lisp
    (defun recker/startup-registers ()
      (set-register ?d '(file . "~/Desktop"))
      (set-register ?e '(file . "~/.emacs.d/README.org"))
      (set-register ?g '(file . "~/git"))
      (set-register ?o '(file . "~/org"))
      (set-register ?p '(file . "~/org/personal.org"))
      (set-register ?w '(file . "~/org/work.org")))

    (defun recker/startup-scratch-buffer ()
      (setq inhibit-startup-message 't)
      (let ((wilfred-installed (executable-find "wilfred-say"))
	    (fortune-installed (executable-find "fortune"))
	    (comment-command-output (lambda (c)
				      (concat
				       (mapconcat
					(lambda (x) (concat ";; " x))
					(split-string (shell-command-to-string c) "\n" t) "\n")
				       "\n" "\n"))))
	(if wilfred-installed
	    (setq initial-scratch-message
		  (funcall comment-command-output "wilfred-say"))
	  (if fortune-installed
	      (setq initial-scratch-message
		    (funcall comment-command-output "fortune"))))))

    (exec-path-from-shell-initialize)
    (recker/startup-registers)
    (recker/startup-scratch-buffer)

    (defun recker/startup-hook ()
      (elpy-enable)
      (global-company-mode)
      (global-whitespace-cleanup-mode)
      (global-git-gutter-mode 1)
      (server-force-delete)
      (server-start))
    (add-hook 'after-init-hook 'recker/startup-hook)
  #+END_SRC

* Interface

  Hide default elements in the UI, default Dired mode to hide details,
  and disable some obnoxious behavior.  Also hide minor modes from the
  modeline.

  #+BEGIN_SRC emacs-lisp
    (defun recker/interface ()
      (menu-bar-mode 0)
      (tool-bar-mode 0)
      (toggle-scroll-bar 0)
      (load-theme 'zenburn t)
      (set-face-attribute 'default nil :height 150))

    (defun recker/helm-init ()
      (require 'helm-config)
      (helm-mode 1)
      (projectile-global-mode)
      (setq projectile-completion-system 'helm)
      (helm-projectile-on)
      (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
      (setq helm-semantic-fuzzy-match t
	    helm-imenu-fuzzy-match t))

    (setq backup-inhibited t
	  auto-save-default 0
	  indent-tabs-mode 0)

    (define-minor-mode minor-mode-blackout-mode
      "Hides minor modes from the mode line."
      t)
    (catch 'done
      (mapc (lambda (x)
	      (when (and (consp x)
			 (equal (cadr x) '("" minor-mode-alist)))
		(let ((original (copy-sequence x)))
		  (setcar x 'minor-mode-blackout-mode)
		  (setcdr x (list "" original)))
		(throw 'done t)))
	    mode-line-modes))

    (defun recker/dired-mode-hook ()
      (setq-default dired-omit-files-p t)
      (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))
      (dired-hide-details-mode))

    (recker/interface)
    (recker/helm-init)
    (add-hook 'dired-mode-hook 'recker/dired-mode-hook)
  #+END_SRC

* Modes

  This hook applies to ~text-mode~, which is "for editing text written
  for humans to read."  It is up to more specific modes to disable
  these options if desired.

  #+BEGIN_SRC emacs-lisp
    (defun recker/text-mode-hook ()
      (auto-fill-mode 1)
      (flyspell-mode 1))
    (add-hook 'text-mode-hook 'recker/text-mode-hook)
  #+END_SRC

** HTML

   #+BEGIN_SRC emacs-lisp
     (require 'web-mode)
     (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
     (setq web-mode-markup-indent-offset 2)
     (defun recker/web-mode-hook ()
       (emmet-mode)
       (auto-fill-mode 0))
     (add-hook 'web-mode-hook 'recker/web-mode-hook)
   #+END_SRC

** JavaScript

   Auto-completion is done through [[https://www.npmjs.com/package/tern][tern]].  Install it globally with
   ~npm install -g tern~ for it to work.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.json$" . js-mode))
     (add-hook 'js-mode-hook 'js2-minor-mode)
     (defun recker/js-mode-hook ()
       (setq company-tern-property-marker "")
       (add-to-list 'company-backends 'company-tern)
       (tern-mode t))
     (add-hook 'js-mode-hook 'recker/js-mode-hook)
   #+END_SRC

** Python

   Elpy's global mode should take care of everything, but just make
   sure to install the [[file:requirements.txt][pip packages]] needed for it to work.

   #+BEGIN_SRC emacs-lisp
     (setq elpy-rpc-timeout 10)
   #+END_SRC

** Term

   #+BEGIN_SRC emacs-lisp
     (defadvice term-handle-exit
	 (after term-kill-buffer-on-exit activate)
       (kill-buffer))

     (defun recker/ansi-term ()
       (interactive)
       (ansi-term "/bin/bash"))

     (defun recker/term-mode-hook ()
       (global-hl-line-mode 0))
     (add-hook 'term-mode-hook 'recker/term-mode-hook)
   #+END_SRC

** YAML

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
     (add-to-list 'auto-mode-alist '("\\.sls$" . yaml-mode))
     (defun recker/yaml-mode-hook ()
       (auto-fill-mode 0))
     (add-hook 'yaml-mode-hook 'recker/yaml-mode-hook)
   #+END_SRC

** XML

   #+BEGIN_SRC emacs-lisp
     (defun recker/nxml-mode-hook ()
       (auto-fill-mode 0))
     (add-hook 'nxml-mode-hook 'recker/nxml-mode-hook)
   #+END_SRC

* Org

  #+BEGIN_SRC emacs-lisp
    (setq org-agenda-files (quote ("~/org")))
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (ruby . t)
       (sh . t)
       (java . t)
       (js . t)
       (C . t)))

    (setq org-capture-templates
	  '(
	    ("t" "task" entry (file+headline "~/org/work.org" "Tasks")
	     "* TODO %?"
	     :empty-lines 1)
	    ("m" "meeting" entry (file+headline "~/org/work.org" "Meetings")
	     "* %?\nSCHEDULED: %^t"
	     :empty-lines 1)
	    ("p" "personal task" entry (file+headline "~/org/personal.org" "Tasks")
	     "* TODO %?"
	     :empty-lines 1)
	    ("i" "idea" entry (file+headline "~/org/personal.org" "Ideas")
	     "* %?"
	     :empty-lines 1)
	    ))

    (defun recker/org-projects ()
      (let ((blog-file "~/git/blog/blog.el"))
	(if (file-exists-p blog-file)
	    (load-file blog-file))))
    (recker/org-projects)
  #+END_SRC

* Key-bindings

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-=") 'er/expand-region)
    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c c") 'org-capture)
    (global-set-key (kbd "C-c e") 'eshell)
    (global-set-key (kbd "C-c f") 'helm-projectile)
    (global-set-key (kbd "C-c h o") 'helm-occur)
    (global-set-key (kbd "C-c i") 'imenu)
    (global-set-key (kbd "C-c l") 'sort-lines)
    (global-set-key (kbd "C-c r") 'eval-region)
    (global-set-key (kbd "C-x C-b") 'helm-buffers-list)
    (global-set-key (kbd "C-x C-f") 'helm-find-files)
    (global-set-key (kbd "C-x g") 'magit-status)
    (global-set-key (kbd "C-x r b") 'helm-filtered-bookmarks)
    (global-set-key (kbd "C-x t") 'recker/ansi-term)
    (global-set-key (kbd "M-;") 'comment-dwim-2)
    (global-set-key (kbd "M-x") 'helm-M-x)
    (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  #+END_SRC

* Local

  Miscellaneous local changes can be kept [[file:lisp][here]].  This function loads
  all ~.el~ files there.

  #+BEGIN_SRC emacs-lisp
    (defun recker/load-directory (dir)
      (let ((load-it (lambda (f)
		       (load-file (concat (file-name-as-directory dir) f)))
		     ))
	(mapc load-it (directory-files dir nil "\\.el$"))))
    (recker/load-directory "~/.emacs.d/lisp/")
  #+END_SRC
