#+TITLE: Emacs Config
#+AUTHOR: Alex Recker
#+EMAIL: alex@reckerfamily.com
#+STARTUP: indent hidestars

* About

  This is my literate emacs configuration.  To use my emacs
  environment, first clone this repository.

  #+BEGIN_SRC sh
      git clone https://github.com/arecker/emacs.d ~/.emacs.d[
  #+END_SRC

  Next, [[http://cask.readthedocs.org/en/latest/guide/installation.html][install cask]] and use it to bootstrap the config with
  dependencies.

  #+BEGIN_SRC sh
    cd ~/.emacs.d
    ~/.cask/bin/cask install
  #+END_SRC

  Next, install the python development packages to your global
  environment.

  #+BEGIN_SRC sh
      sudo pip install -r requirements.txt
  #+END_SRC

  Finally, install the [[https://www.npmjs.com/package/tern][tern]] package globally via ~npm~.

  #+BEGIN_SRC sh
      sudo npm install -g tern
  #+END_SRC

* User Details

Tell emacs who you are

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Alex Recker"
        user-mail-address "alex@reckerfamily.com")
#+END_SRC

* Startup

Fix PATH in OSX

#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))
#+END_SRC

Just show the ~*scratch*~ buffer on startup.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message 1)
#+END_SRC

If the [[https://github.com/arecker/wilfred-say][wilfred-say]] program is intsalled, print the output to the
~*scratch*~ buffer on startup.

#+BEGIN_SRC emacs-lisp
  (defun recker/wilfred-say ()
    (when (executable-find "wilfred-say")
      (setq initial-scratch-message
            (concat
             (mapconcat
              (lambda (x) (concat ";; " x))
              (split-string (shell-command-to-string "wilfred-say") "\n"
                            t) "\n")
             "\n\n"))))
  (recker/wilfred-say)
#+END_SRC

Start some miscellaneous global settings and plugins.

#+BEGIN_SRC emacs-lisp
  (defun recker/after-init-hook ()
    (elpy-enable)
    (global-company-mode)
    (global-git-gutter-mode 1)
    (global-hl-line-mode 1)
    (global-whitespace-cleanup-mode 1)
    (helm-mode 1)
    (helm-projectile-on)
    (projectile-global-mode))
  (add-hook 'after-init-hook 'recker/after-init-hook)
#+END_SRC

* UI

I prefer to hide a lot of the default UI components - like the
toolbar, menu bar, and scrollbar.

#+BEGIN_SRC emacs-lisp
  (defun recker/hide-ui-elements ()
    (menu-bar-mode 0)
    (tool-bar-mode 0)
    (toggle-scroll-bar 0))
  (recker/hide-ui-elements)
#+END_SRC

I also like to hide minor modes from the modeline.  I have a lot of
plugins, so otherwise that looks cluttered.

#+BEGIN_SRC emacs-lisp
  (define-minor-mode minor-mode-blackout-mode
    "Hides minor modes from the mode line."
    t)
  (catch 'done
    (mapc (lambda (x)
            (when (and (consp x)
                       (equal (cadr x) '("" minor-mode-alist)))
              (let ((original (copy-sequence x)))
                (setcar x 'minor-mode-blackout-mode)
                (setcdr x (list "" original)))
              (throw 'done t)))
          mode-line-modes))
#+END_SRC

Load the theme.  This changes frequently.

#+BEGIN_SRC emacs-lisp
  (load-theme 'zenburn t)
#+END_SRC

Make the font bigger on OS X

#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'darwin)
      (set-face-attribute 'default nil :height 150))
#+END_SRC

* Term

Make sure lines aren't hilighted in term mode.

#+BEGIN_SRC emacs-lisp
  (defun recker/term-mode-hook ()
    (global-hl-line-mode 0))
  (add-hook 'term-mode-hook 'recker/term-mode-hook)
#+END_SRC

Also, close the buffer when the term exits.

#+BEGIN_SRC emacs-lisp
  (defadvice term-handle-exit
      (after term-kill-buffer-on-exit activate)
    (kill-buffer))
#+END_SRC

Default on the bash shell.

#+BEGIN_SRC emacs-lisp
  (defun recker/ansi-term ()
    (interactive)
    (ansi-term "/bin/bash"))
#+END_SRC

* Text

Disable auto-save, auto-backup and tabs.  Tabs can be inserted using
~C-q TAB~

#+BEGIN_SRC emacs-lisp
  (setq backup-inhibited t
        auto-save-default 0
        indent-tabs-mode 0)
#+END_SRC

By default for any mode, auto fill and enable spell checking.  Also,
use nicer word wrapping and highlight the current line.

Also enables some global plugins.

#+BEGIN_SRC emacs-lisp
  (defun recker/text-mode-hook ()
    (auto-fill-mode 1)
    (flyspell-mode 1)
    (global-visual-line-mode 1))
  (add-hook 'text-mode-hook 'recker/text-mode-hook)
#+END_SRC

* HTML

Associate web mode and emmet mode

#+BEGIN_SRC emacs-lisp
  (require 'web-mode)

  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))

  (setq web-mode-markup-indent-offset 2
        web-mode-enable-current-column-highlight t)

  (defun recker/web-mode-hook ()
    (emmet-mode)
    (auto-fill-mode 0))

  (add-hook 'web-mode-hook 'recker/web-mode-hook)
#+END_SRC

* JavaScript

Associate js2-mode and tern

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.json$" . js-mode))
  (add-hook 'js-mode-hook 'js2-minor-mode)
  (defun recker/js-mode-hook ()
    (setq company-tern-property-marker "")
    (add-to-list 'company-backends 'company-tern)
    (tern-mode t))
  (add-hook 'js-mode-hook 'recker/js-mode-hook)
#+END_SRC

* YAML

Add yaml mode and associate it to file extensions.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
  (add-to-list 'auto-mode-alist '("\\.sls$" . yaml-mode))
#+END_SRC

* Org

Set the org root at ~/org

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (quote ("~/org")))
#+END_SRC

Enable the languages I dabble in.

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (ruby . t)
     (sh . t)
     (java . t)
     (js . t)
     (C . t)))
#+END_SRC

* Email

I'd like to be able to send an email through gmail if I need to.

#+BEGIN_SRC emacs-lisp
  (setq message-send-mail-function 'smtpmail-send-it
        smtpmail-stream-type 'starttls
        smtpmail-default-smtp-server "smtp.gmail.com"
        smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 587)
#+END_SRC

* Helm

Some customizations for the [[https://github.com/emacs-helm/helm][helm]] plugin.

#+BEGIN_SRC emacs-lisp
  (require 'helm)
  (setq helm-M-x-fuzzy-match t
        helm-autoresize-mode t
        helm-buffers-fuzzy-matching t
        helm-recentf-fuzzy-match t
        projectile-completion-system 'helm)
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
  (define-key helm-map (kbd "C-z")  'helm-select-action)
#+END_SRC

* Functions

Various interactive functions.

#+BEGIN_SRC emacs-lisp
  (defun recker/sudo ()
    "Edit the current file as root"
    (interactive)
    (if (buffer-file-name)
        (let ((file-name (buffer-file-name)))
          (kill-buffer (current-buffer))
          (find-file (concat "/sudo::" file-name))
          (message "now editing %s as root" file-name))))

  (defvar indirect-mode-name nil
    "Mode to set for indirect buffers.")
  (make-variable-buffer-local 'indirect-mode-name)
  (defun recker/indirect-region (start end)
    "Edit the current region in another buffer.
        If the buffer-local variable `indirect-mode-name' is not set, prompt
        for mode name to choose for the indirect buffer interactively.
        Otherwise, use the value of said variable as argument to a funcall."
    (interactive "r")
    (let ((buffer-name (generate-new-buffer-name "*indirect*"))
          (mode
           (if (not indirect-mode-name)
               (setq indirect-mode-name
                     (intern
                      (completing-read
                       "Mode: "
                       (mapcar (lambda (e)
                                 (list (symbol-name e)))
                               (apropos-internal "-mode$" 'commandp))
                       nil t)))
             indirect-mode-name)))
      (pop-to-buffer (make-indirect-buffer (current-buffer) buffer-name))
      (funcall mode)
      (narrow-to-region start end)
      (goto-char (point-min))
      (shrink-window-if-larger-than-buffer)))

  (defun recker/jump-next-line ()
    (interactive)
    (next-line 5))

  (defun recker/jump-previous-line ()
    (interactive)
    (previous-line 5))
#+END_SRC

* Registers

These are bookmarked files and folders.

#+BEGIN_SRC emacs-lisp
  (set-register ?d '(file . "~/Desktop"))
  (set-register ?e '(file . "~/.emacs.d/README.org"))
  (set-register ?g '(file . "~/git"))
  (set-register ?o '(file . "~/org"))
  (set-register ?p '(file . "~/org/personal.org"))
  (set-register ?w '(file . "~/org/work.org"))
#+END_SRC

* Keybindings

All keybindings go here.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-=") 'er/expand-region)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-c M-i") 'helm-imenu)
  (global-set-key (kbd "C-s") 'helm-swoop)
  (global-set-key (kbd "C-x C-b") 'helm-buffers-list)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-x f") 'helm-projectile-find-file)
  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "C-x t") 'recker/ansi-term)
  (global-set-key (kbd "M-;") 'comment-dwim-2)
  (global-set-key (kbd "M-n") 'recker/jump-next-line)
  (global-set-key (kbd "M-p") 'recker/jump-previous-line)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
#+END_SRC
