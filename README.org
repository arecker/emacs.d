#+TITLE: Emacs Configuration
#+SUBTITLE: I'm just a dude with a text editor
#+AUTHOR: Alex Recker
#+STARTUP: showeverything
#+OPTIONS: num:nil

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Alex Recker"
	user-mail-address "alex@reckerfamily.com")
#+END_SRC

* Packages

  #+BEGIN_SRC emacs-lisp
    (use-package comment-dwim-2
      :ensure t
      :bind ("M-;" . comment-dwim-2))

    (use-package company
      :ensure t
      :config (global-company-mode))

    (use-package company-tern
      :ensure t
      :init (setq company-tern-property-marker "")
      :config
      (add-hook 'js-mode-hook
                (lambda ()
                  (add-to-list 'company-backends 'company-tern)
                  (tern-mode t)
                  )))

    (use-package elpy
      :ensure t
      :config (elpy-enable)
      :init (setq elpy-rpc-timeout 10))

    (use-package exec-path-from-shell
      :ensure t
      :config (exec-path-from-shell-initialize))

    (use-package emmet-mode
      :ensure t
      :config (add-hook 'web-mode-hook 'emmet-mode))

    (use-package expand-region
      :ensure t
      :bind ("C-=" . er/expand-region))

    (use-package git-gutter
      :ensure t
      :config (global-git-gutter-mode 1))

    (use-package helm
      :ensure t
      :config
      (setq helm-semantic-fuzzy-match t
            helm-imenu-fuzzy-match t)
      (helm-mode 1)
      :bind (("C-x C-b" . helm-buffers-list)
             ("C-x b" . helm-mini)
             ("C-x C-f" . helm-find-files)
             ("C-c h o" . helm-occur)
             ("C-c i" . helm-imenu)
             ("C-x r b" . helm-filtered-bookmarks)
             ("M-x" . helm-M-x)
             ("M-y" . helm-show-kill-ring)
             :map helm-map
             ("<tab>" . helm-execute-persistent-action)))

    (use-package helm-projectile
      :ensure t
      :config
      (projectile-global-mode)
      (setq projectile-completion-system 'helm)
      (helm-projectile-on)
      :bind ("C-c f" . helm-projectile))

    (use-package js2-mode
      :ensure t
      :config (add-hook 'js-mode-hook 'js2-minor-mode))

    (use-package org
      :init
      (setq org-agenda-files '("~/org")
            org-capture-templates
            '(
              ("t" "task" entry (file+headline "~/org/work.org" "Tasks")
               "* TODO %?"
               :empty-lines 1)
              ("b" "bug" entry (file+headline "~/org/work.org" "Bugs")
               "* TODO %?%^{LINK}p"
               :empty-lines 1)
              ("m" "meeting" entry (file+headline "~/org/work.org" "Meetings")
               "* %?\nSCHEDULED: %^t"
               :empty-lines 1)
              ("p" "personal task" entry (file+headline "~/org/personal.org" "Tasks")
               "* TODO %?"
               :empty-lines 1)
              ("i" "idea" entry (file+headline "~/org/personal.org" "Ideas")
               "* %?"
               :empty-lines 1)
              ))
      :config
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((python . t)
         (ruby . t)
         (sh . t)
         (java . t)
         (js . t)
         (C . t)))
      :bind (("C-c a" . org-agenda)
             ("C-c c" . org-capture)
             ("C-c s" . org-store-link)))

    (use-package magit
      :ensure t
      :bind ("C-x g" . magit-status))

    (use-package markdown-mode
      :ensure t
      :commands (markdown-mode gfm-mode)
      :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)
             ("\\.markdown\\'" . markdown-mode)))

    (use-package web-mode
      :ensure t
      :mode ("\\.html\\'" . web-mode)
      :config (setq web-mode-markup-indent-offset 2))

    (use-package whitespace-cleanup-mode
      :ensure t
      :config (global-whitespace-cleanup-mode))

    (use-package yaml-mode
      :ensure t
      :init (add-to-list 'auto-mode-alist '("\\.sls$" . yaml-mode)))

    (use-package yasnippet
      :ensure t
      :config (yas-global-mode))

    (use-package zenburn-theme
      :ensure t
      :config
      (load-theme 'zenburn t))
  #+END_SRC

* Startup

  Setup file registers and if [[https://pypi.python.org/pypi/wilfred-say][wilfred-say]] or fortune is installed,
  display it in the =*scratch*= buffer.

  #+BEGIN_SRC emacs-lisp
    (defun recker/startup-registers ()
      (set-register ?d '(file . "~/Desktop"))
      (set-register ?e '(file . "~/.emacs.d/README.org"))
      (set-register ?g '(file . "~/git"))
      (set-register ?o '(file . "~/org"))
      (set-register ?p '(file . "~/org/personal.org"))
      (set-register ?w '(file . "~/org/work.org")))

    (defun recker/startup-scratch-buffer ()
      (setq inhibit-startup-message 't)
      (let ((wilfred-installed (executable-find "wilfred-say"))
            (fortune-installed (executable-find "fortune"))
            (comment-command-output (lambda (c)
                                      (concat
                                       (mapconcat
                                        (lambda (x) (concat ";; " x))
                                        (split-string (shell-command-to-string c) "\n" t) "\n")
                                       "\n" "\n"))))
        (if wilfred-installed
            (setq initial-scratch-message
                  (funcall comment-command-output "wilfred-say"))
          (if fortune-installed
              (setq initial-scratch-message
                    (funcall comment-command-output "fortune"))))))

    (recker/startup-registers)
    (recker/startup-scratch-buffer)
  #+END_SRC

* Interface

  Hide default elements in the UI, default Dired mode to hide details,
  and disable some obnoxious behavior. Also hide minor modes from the
  modeline.

  #+BEGIN_SRC emacs-lisp
    (setq backup-inhibited t
          auto-save-default 0
          indent-tabs-mode 0)

    (menu-bar-mode 0)
    (tool-bar-mode 0)
    (toggle-scroll-bar 0)

    (set-face-attribute 'default nil
                        :family "Courier New"
                        :height 140
                        :weight 'normal
                        :width 'normal)

    (define-minor-mode minor-mode-blackout-mode
      "Hides minor modes from the mode line."
      t)
    (catch 'done
      (mapc (lambda (x)
              (when (and (consp x)
                         (equal (cadr x) '("" minor-mode-alist)))
                (let ((original (copy-sequence x)))
                  (setcar x 'minor-mode-blackout-mode)
                  (setcdr x (list "" original)))
                (throw 'done t)))
            mode-line-modes))

    (defun recker/dired-mode-hook ()
      (setq-default dired-omit-files-p t)
      (setq dired-omit-files "^\\.?#\\|^\\.$\\|^\\.\\.$\\|^\\..+$")
      (dired-hide-details-mode))

    (add-hook 'dired-mode-hook 'recker/dired-mode-hook)
  #+END_SRC

* Modes

  This is the =text-mode= hook, which is /for editing text written for
  humans to read/.  It is up to more specific modes to disable these
  options if desired.

  #+BEGIN_SRC emacs-lisp
    (defun recker/text-mode-hook ()
      (auto-fill-mode 1)
      (flyspell-mode 1))
    (add-hook 'text-mode-hook 'recker/text-mode-hook)
  #+END_SRC

  Some Miscellaneous Key Bindings

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c l") 'sort-lines)
    (global-set-key (kbd "C-c r") 'eval-region)
  #+END_SRC

** HTML

   #+BEGIN_SRC emacs-lisp
     (defun recker/web-mode-hook ()
       (auto-fill-mode 0))
     (add-hook 'web-mode-hook 'recker/web-mode-hook)
   #+END_SRC

** JavaScript

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.json$" . js-mode))
   #+END_SRC

** TERM

   #+BEGIN_SRC emacs-lisp
     (defadvice term-handle-exit
         (after term-kill-buffer-on-exit activate)
       (kill-buffer))

     (defun recker/ansi-term ()
       (interactive)
       (ansi-term "/bin/bash"))

     (defun recker/term-mode-hook ()
       (global-hl-line-mode 0)
       (yas-minor-mode 0))

     (add-hook 'term-mode-hook 'recker/term-mode-hook)

     (global-set-key (kbd "C-c e") 'eshell)
     (global-set-key (kbd "C-x t") 'recker/ansi-term)
   #+END_SRC

** XML

   #+BEGIN_SRC emacs-lisp
     (defun recker/nxml-mode-hook ()
       (auto-fill-mode 0))
     (add-hook 'nxml-mode-hook 'recker/nxml-mode-hook)
   #+END_SRC

** YAML

   #+BEGIN_SRC emacs-lisp
     (defun recker/yaml-mode-hook ()
       (auto-fill-mode 0))
     (add-hook 'yaml-mode-hook 'recker/yaml-mode-hook)
   #+END_SRC

* GNUS

  These are still kind of experimental.

  #+BEGIN_SRC emacs-lisp
    (setq gnus-select-method '(nnml ""))
    (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
  #+END_SRC

* Functions

  Some helpful functions

  #+BEGIN_SRC emacs-lisp
    (defun recker/purge-buffers ()
      "Deletes all buffers except for *scratch*"
      (interactive)
      (let ((kill-if-not-scratch
             (lambda (b)
               (unless (string= (buffer-name b) "*scratch*")
                 (kill-buffer b)))))
        (mapc kill-if-not-scratch (buffer-list))))

    (defun recker/unfill-region (beg end)
      "Unfill the region, joining text paragraphs into a single
        logical line.  This is useful, e.g., for use with
        `visual-line-mode'."
      (interactive "*r")
      (let ((fill-column (point-max)))
        (fill-region beg end)))

    (defun recker/open-hg-jira-ticket (team id)
      "Interactively opens a JIRA case by team/id in the browser"
      (interactive "sTEAM: \nsID: ")
      (browse-url
       (concat "https://healthgrades.atlassian.net/browse/" team "-" id)))
  #+END_SRC

* Local Changes

  Miscellaneous local changes can be kept [[file:lisp][here]].  This function loads
  all =.el= files there.

  #+BEGIN_SRC emacs-lisp
    (defun recker/load-directory (dir)
      (let ((load-it (lambda (f)
                       (load-file (concat (file-name-as-directory dir) f)))
                     ))
        (mapc load-it (directory-files dir nil "\\.el$"))))
    (recker/load-directory "~/.emacs.d/lisp/")
  #+END_SRC
