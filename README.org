#+TITLE: Emacs Configuration
#+AUTHOR: Alex Recker
#+OPTIONS: toc:nil num:nil

This is my personal emacs configuration.

* Personal

This configuration has been tailored for my preference, but if you'd
like to adopt this configuration for your own needs, this section is
the only thing you need to update or omit.

** Identification

Tell emacs who you are.  Try not to use my name and email, otherwise
you might confuse my mother.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Alex Recker"
	user-mail-address "alex@reckerfamily.com")
#+END_SRC

** Paths

This is a helper function I wrote to help reference file paths more
concisely.  On linux boxes, I like to use all lowercase names like
=docs= and =pics=.  On MacOS, I like to use the =Documents= and
=Pictures= directories that are created for you, since you can't
delete them anyway.

#+BEGIN_SRC emacs-lisp
  (defun recker/path (dir &optional subpath)
    "Helper function to turn a symbolic path to an absolute path."
    (let* ((macos-p (string-equal system-type "darwin"))
	   (dir (pcase dir
		  ('home "~")
		  ('desktop (if macos-p "~/Desktop" "~/desktop"))
		  ('docs (if macos-p "~/Documents" "~/docs"))
		  ('pics (if macos-p "~/Pictures" "~/pics"))
		  ('public (if macos-p "~/Public" "~/public"))
		  ('emacs user-emacs-directory)
		  (_ (error (format "no %s directory!" dir)))))
	   (subdir (or subpath "")))
      (expand-file-name (concat (file-name-as-directory dir) subpath))))
#+END_SRC

Register some files I visit often, across all machines.

#+BEGIN_SRC emacs-lisp
(set-register ?d `(file . ,(recker/path 'desktop)))
(set-register ?e `(file . ,(recker/path 'emacs "README.org")))
(set-register ?f '(file . "/ssh:alex@fileboi.local:/data"))
(set-register ?j `(file . ,(recker/path 'docs "journal.org")))
(set-register ?l `(file . ,(recker/path 'emacs "local.el")))
(set-register ?o `(file . ,(recker/path 'docs "opsat.org")))
(set-register ?w `(file . ,(recker/path 'docs "work.org")))
#+END_SRC

Save everything else in a bookmarks file.

#+BEGIN_SRC emacs-lisp
(setq bookmark-save-flag 1
      bookmark-default-file (recker/path 'docs "emacs/bookmarks.el"))
#+END_SRC

* Scratch

The slash screen displayed on startup is a little too noisy for
me. The =*scratch*= buffer is a lot more low key.

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message 't)
#+END_SRC

Here is a collection of pithy quotes I like to display on my scratch
screen.

#+NAME: scratch-quotes
| Quote                                                                                                                      | Attribution               |
|----------------------------------------------------------------------------------------------------------------------------+---------------------------|
| Sanity and happiness are an impossible combination.                                                                        | Mark Twain                |
| Trust thyself only, and another shall not betray thee.                                                                     | Thomas Fuller             |
| Fear has its uses but cowardice has none.                                                                                  | Mahatma Ghandi            |
| Happiness can exist only in acceptance.                                                                                    | George Orwell             |
| Seek respect mainly from thyself, for it comes first from within.                                                          | Steven H. Coogler         |
| Conscience is the dog that can't bite, but never stops barking.                                                            | Proverb                   |
| In general, pride is at the bottom of all great mistakes.                                                                  | Steven H. Coogler         |
| Anger as soon as fed is dead -- tis starving makes it fat.                                                                 | Emily Dickinson           |
| Make no judgements where you have no compassion.                                                                           | Anne McCaffrey            |
| Isolation is a self-defeating dream.                                                                                       | Carlos Salinas de Gortari |
| Doubt must be no more than vigilance, otherwise it can become dangerous.                                                   | George C. Lichtenberg     |
| Love is a willingless to sacrifice.                                                                                        | Michael Novak             |
| The value of identity is that so often with it comes purpose.                                                              | Richard R. Grant          |
| Discontent is the first necessity of progress.                                                                             | Thomas Edison             |
| Some of us think holding on makes us strong, but sometimes it is letting go.                                               | Herman Hesse              |
| Let not a man guard his dignity but let his dignity guard him.                                                             | Ralph Waldo Emerson       |
| Guilt: the gift that keeps on giving.                                                                                      | Erma Bombeck              |
| Be here now.                                                                                                               | Ram Dass                  |
| The master understands that the universe is forever out of control.                                                        | Lao Tzu                   |
| Our biggest problems arise from the avoidance of smaller ones.                                                             | Jeremy Caulfield          |
| The truth will set you free, but first it will make you miserable                                                          | James A. Garfield         |
| The thing that lies at the foundation of positive change is service to a fellow human being                                | Lee Iacocca               |
| Honesty and transparency make you vulnerable. Be honest and transparent anyway                                             | Mother Teresa             |
| If you do not ask the right questions, you do not get the right answers.                                                   | Edward Hodnett            |
| Resentment is like taking poison and waiting for the other person to die.                                                  | Malachy McCourt           |
| If we knew each other's  secrets, what comfort should we find.                                                             | John Churton Collins      |
| The mistake is thinking that there can be an antidote to the uncertainty.                                                  | David Levithan            |
| Cure sometimes, treat often, comfort always.                                                                               | Hippocrates               |
| Suspicion is a heavy armor and with its weight it impedes more than it protects.                                           | Robert Burns              |
| Sincerity, even if it speaks with a stutter, will sound eloquent when inspired.                                            | Eiji Yoshikawa            |
| I have little shame, no dignity - all in the name of a better cause.                                                       | A.J. Jacobs               |
| Truth may sometimes hurt, but delusion harms.                                                                              | Vanna Bonta               |
| Intuition is more important to discovery than logic.                                                                       | Henri Poincare            |
| How weird was it to drive streets I knew so well. What a different perspective.                                            | Suzanne Vega              |
| There can be no progress without head-on confrontation.                                                                    | Christopher Hitchens      |
| Sometimes it's necessary to go a long distance out of the way to come back a short distance correctly.                     | Edward Albea              |
| Stagnation is death. If you don't change, you die. It's that simple. It's that scary.                                      | Leonard Sweet             |
| In my opinion, actual heroism, like actual love, is a messy, painful, vulnerable business.                                 | John Green                |
| Maybe all one can do is hope to end up with the right regrets.                                                             | Arthur Miller             |
| If you have behaved badly, repent, make what amends you can and address yourself to the task of behaving better next time. | Aldous Huxley             |
| Sooner or later everyone sits down to a banquet of consequences.                                                           | Robert Louis Stevenson    |
| We are all in the same boat, in a stormy sea, and we owe each other a terrible loyalty.                                    | G.K. Chesterton           |
| In our quest for the answers of life we tend to make order out of chaos, and chaos out of order.                           | Jeffrey Fry               |
| There are many ways of going forward, but only one way of standing still.                                                  | Franklin D. Roosevelt     |
| Truth is outside of all patterns.                                                                                          | Bruce Lee                 |
| By imposing too great a responsibility, or rather, all responsibility, on yourself, you crush yourself.                    | Franz Kafka               |
| How few there are who have courage enough to own their faults, or resolution enough to mend them.                          | Benjamin Franklin         |
| Resistance is useless.                                                                                                     | Doctor Who                |
| Happiness does not depend on outward things, but on the way we see them.                                                   | Leo Tolstoy               |
| Being president is like being a jackass in a hailstorm.  There's nothing to do but to stand there and take it.             | Lyndon Johnson            |

Pick a random quote on startup, wrap it in a lisp comment box, and
assign it to the scratch message variable.

#+BEGIN_SRC emacs-lisp :var quotes=scratch-quotes
  (setq initial-scratch-message (let* ((choice (nth (random (length quotes)) quotes))
				       (text (car choice))
				       (attribution (car (cdr choice))))
				  (with-temp-buffer
				    (lisp-mode)
				    (newline)
				    (insert (format "\"%s\"\n" text))
				    (fill-region (point-min) (point-max))
				    (insert (format "-- %s" attribution))
				    (comment-region (point-min) (point-max))
				    (dotimes (_ 2) (newline))
				    (buffer-string))))
#+END_SRC

Don't kill the scratch buffer.

#+BEGIN_SRC emacs-lisp
  (defun recker/dont-kill-scratch ()
    "Return NIL if the current buffer is the *scratch* buffer."
    (unless (equal (buffer-name (current-buffer)) "*scratch*")
      t))

  (add-hook 'kill-buffer-query-functions 'recker/dont-kill-scratch)
#+END_SRC

* Interface

Disable the toolbar, scrollbar, and menu bar.

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC

I like my emacs /extra thicc/.

#+BEGIN_SRC emacs-lisp
  (setq initial-frame-alist '((width . 99) (height . 53))
	default-frame-alist '((width . 99) (height . 53)))
#+END_SRC

** Font

Set the font to Monaco if it's installed.

#+BEGIN_SRC emacs-lisp
  (if (member "Monaco" (font-family-list))
      (set-frame-font "Monaco 13"))
#+END_SRC

** Modeline

Define a minor mode that hides all minor modes from the modeline (they
tend to stack up and I don't need to look at them in every buffer).

#+BEGIN_SRC emacs-lisp
(define-minor-mode minor-mode-blackout-mode
  "Hides minor modes from the mode line."
  t)

(catch 'done
  (mapc (lambda (x)
          (when (and (consp x)
                     (equal (cadr x) '("" minor-mode-alist)))
            (let ((original (copy-sequence x)))
              (setcar x 'minor-mode-blackout-mode)
              (setcdr x (list "" original)))
            (throw 'done t)))
        mode-line-modes))

(add-hook 'init-hook 'minor-mode-blackout-mode)
#+END_SRC

** Interactive Do

Use IDO mode.

#+BEGIN_SRC emacs-lisp
(ido-mode t)
#+END_SRC

Everywhere.

#+BEGIN_SRC emacs-lisp
(setq ido-everywhere t)
#+END_SRC

Enable flex matching, so I can still use emacs even while drunk.

#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)
#+END_SRC

Just use IDO whenever possible and sensible.

#+BEGIN_SRC emacs-lisp
(defvar ido-enable-replace-completing-read t
  "If t, use ido-completing-read instead of completing-read if possible.
    
    Set it to nil using let in around-advice for functions where the
    original completing-read is required.  For example, if a function
    foo absolutely must use the original completing-read, define some
    advice like this:
    
    (defadvice foo (around original-completing-read-only activate)
      (let (ido-enable-replace-completing-read) ad-do-it))")

;; Replace completing-read wherever possible, unless directed otherwise
(defadvice completing-read
    (around use-ido-when-possible activate)
  (if (or (not ido-enable-replace-completing-read) ; Manual override disable ido
          (and (boundp 'ido-cur-list)
               ido-cur-list)) ; Avoid infinite loop from ido calling this
      ad-do-it
    (let ((allcomp (all-completions "" collection predicate)))
      (if allcomp
          (setq ad-return-value
                (ido-completing-read prompt
                                     allcomp
                                     nil require-match initial-input hist def))
        ad-do-it))))
#+END_SRC

Except when in DIRED mode.

#+BEGIN_SRC emacs-lisp
 (add-hook 'dired-mode-hook
              '(lambda ()
                 (set (make-local-variable 'ido-enable-replace-completing-read) nil)))
#+END_SRC

Bind =imenu=.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c i") 'imenu)
#+END_SRC

* Behavior

Prevent emacs from automatically making backups and auto-save files.

#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil
	auto-save-default nil)
#+END_SRC

Tell emacs to automatically reload a buffer if the file changes
underneath.

#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

Because =C-x C-c= is easier to accidentally type than you'd think,
tell emacs to require confirmation on exit.

#+BEGIN_SRC emacs-lisp
  (setq confirm-kill-emacs #'yes-or-no-p)
#+END_SRC

Don't prompt for confirmation when killing a buffer.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x k") 'kill-this-buffer)
#+END_SRC

Disable that silly goal column warning.

#+BEGIN_SRC emacs-lisp
(put 'set-goal-column 'disabled nil)
#+END_SRC

Replace highlighted text when you start typing.

#+BEGIN_SRC emacs-lisp
(delete-selection-mode t)
#+END_SRC

Force emacs to use the same =PATH= defined in the shell.

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config (exec-path-from-shell-initialize))
#+END_SRC

* Modes

** Text Modes

Turn on spell check.

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook #'(lambda () (flyspell-mode t)))
#+END_SRC

Use personal dictionary for spell check.

#+BEGIN_SRC emacs-lisp
(setq ispell-personal-dictionary (recker/path 'docs "emacs/ispell.dict"))
#+END_SRC

Automatically "fill" text while editing.

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC

*** Org Mode

**** Editing

Render blank lines between collapsed headings.

#+BEGIN_SRC emacs-lisp
(setq org-cycle-separator-lines 1)
#+END_SRC

Insert blank lines between headings by default.

#+BEGIN_SRC emacs-lisp
(setq org-blank-before-new-entry '((heading . t) (plain-list-item . auto)))
#+END_SRC

Set attachments directory.

#+BEGIN_SRC emacs-lisp
(setq org-attach-directory (recker/path 'docs "attachments/"))
#+END_SRC

Delete attachments when archiving something, since everything is
stored in git anyway.

#+BEGIN_SRC emacs-lisp
(setq org-attach-archive-delete 't)
#+END_SRC

**** Capture

Set-up org capture for quickly adding text to notes.

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates '())
#+END_SRC

Add a custom template for daily journaling that files entries in a
date tree.

#+BEGIN_SRC emacs-lisp
  (let* ((journal-path (recker/path 'docs "journal.org"))
	 (dest `(file+olp+datetree ,journal-path))
	 (template `("j" "journal" plain ,dest "%?" :empty-lines 1)))
    (add-to-list 'org-capture-templates template))
#+END_SRC

Bind =org-capture= to a fast, slick keybinding.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

**** Agenda

Use the local documents folder as the agenda root.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (list (recker/path 'docs)))
#+END_SRC

Give =org-agenda= a slick keybinding so I can quickly check it while
working on something else.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC

While browsing the agenda, default to follow mode - which higlights
the item in your notes while you scan through the agenda.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-start-with-follow-mode t)
#+END_SRC

By default, exclude anything that was archived.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-tag-filter-preset '("-ARCHIVE"))
#+END_SRC

Set up some custom agenda views.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-custom-commands '())
#+END_SRC

Add a view to view all upcoming chores.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-agenda-custom-commands
	       '("c" "Chores View"
		 ((agenda "")
		  (tags-todo "chores"))
		 ((org-agenda-tag-filter-preset (quote ("+chores"))))))
#+END_SRC

**** Babel

Live dangerously.  Tell org to run code blocks without confirmation.

#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC

Add some languages!

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (ruby . t)
     (shell . t)))
#+END_SRC

**** Exporting

Set up some publishing projects.

#+BEGIN_SRC emacs-lisp
(setq org-publish-project-alist '())
#+END_SRC

Make a simple publishing project to export public journal entries to
HTML using an [[https://github.com/arecker/blog][external program]] I wrote.

#+BEGIN_SRC emacs-lisp
  (defun recker/blog-journal-publish (plist filename pub-dir)
    (shell-command-to-string
    (format "blog %s %s %s" filename pub-dir (recker/path 'home "src/blog/index.html.erb"))))

  (add-to-list 'org-publish-project-alist
	       `("blog"
		 :base-directory ,(recker/path 'docs)
		 :base-extension "org"
		 :exclude ".*"
		 :include ("journal.org")
		 :publishing-directory ,(recker/path 'public "www.alexrecker.com")
		 :publishing-function recker/blog-journal-publish))
#+END_SRC

** YAML Mode

After pausing for a long sigh, install YAML mode.

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t
  :defer t
  :mode ("\\.yml\\'" "\\.sls\\'")
  :init (add-hook 'yaml-mode-hook 'turn-off-auto-fill))
#+END_SRC

** Prog Modes

Turn on spell checking for comments and docstrings.

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'(lambda () (flyspell-prog-mode)))
#+END_SRC

Support for [[http://editorconfig.org/][editorconfig]], so I can be a good citizen when working on
shared code bases.

#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :ensure t
  :config (editorconfig-mode 1))
#+END_SRC

*** C Mode

Taken from [[https://www.kernel.org/doc/html/v4.10/process/coding-style.html#you-ve-made-a-mess-of-it][The Linux Kernel Coding Style]], which was a way better read
than you'd think.  I slightly modified the provided snippet so that
all of my C would obey these rules by default.

#+BEGIN_SRC emacs-lisp
(defun c-lineup-arglist-tabs-only (ignored)
  "Line up argument lists by tabs, not spaces"
  (let* ((anchor (c-langelem-pos c-syntactic-element))
         (column (c-langelem-2nd-pos c-syntactic-element))
         (offset (- (1+ column) anchor))
         (steps (floor offset c-basic-offset)))
    (* (max steps 1)
       c-basic-offset)))

(add-hook 'c-mode-common-hook
          (lambda ()
            ;; Add kernel style
            (c-add-style
             "linux-tabs-only"
             '("linux" (c-offsets-alist
                        (arglist-cont-nonempty
                         c-lineup-gcc-asm-reg
                         c-lineup-arglist-tabs-only))))))

(add-hook 'c-mode-hook (lambda ()
                         (setq indent-tabs-mode t)
                         (setq show-trailing-whitespace t)
                         (c-set-style "linux-tabs-only")))
#+END_SRC

*** Terraform

#+BEGIN_SRC emacs-lisp
  (use-package terraform-mode
    :ensure t
    :defer t
    :mode "\\.tf\\'")
#+END_SRC

** Special Modes

*** Dired Mode

Hide certain files by default.

#+BEGIN_SRC emacs-lisp
  (require 'dired-x)
  (setq-default dired-omit-files-p t)
  (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))
#+END_SRC

Include file size in =ls= output.

#+BEGIN_SRC emacs-lisp
(setq dired-listing-switches "-alh")
#+END_SRC

Clean up buffers from deleted files without confirmation.

#+BEGIN_SRC emacs-lisp
(setq dired-clean-confirm-killing-deleted-buffers nil)
#+END_SRC

*** Term Mode

Use a wrapper funciton to launch =ansi-term= with bash.

#+BEGIN_SRC emacs-lisp
  (defun recker/ansi-term ()
    (interactive)
    (ansi-term "/bin/bash"))
#+END_SRC

Bind it to something simple.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x t") 'recker/ansi-term)
#+END_SRC

Kill the ansi-term buffer on exit.

#+BEGIN_SRC emacs-lisp
(defadvice term-handle-exit
    (after term-kill-buffer-on-exit activate)
  (kill-buffer))
#+END_SRC

For some things, I don't mind eshell.  Bind that as well.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c e") 'eshell)
#+END_SRC

* Tools

** Auth

Use the encrypted auth info stored in my personal documents.

#+BEGIN_SRC emacs-lisp
(add-to-list 'auth-sources (recker/path 'docs "emacs/authinfo.gpg"))
#+END_SRC

Install =pass=, mostly for the elisp bindings, but I also use the
interface sometimes.

#+BEGIN_SRC emacs-lisp
(use-package pass :ensure t)
#+END_SRC

** Games

Everything in this section is of critical importance, obviously.

#+BEGIN_SRC emacs-lisp
  (setq tetris-score-file (recker/path 'docs "emacs/tetris-scores"))
#+END_SRC

** Git

Install magit.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status))
#+END_SRC

Projectile, for finding stuff in projects.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode t))
#+END_SRC

** Gnus

*** Startup

Gnus requires a “primary method” from which you obtain
news. Unfortunately, the program kind of explodes if this isn’t set,
which proves to be kind of a pain when you want to poke around and set
up things interactively.  Here’s my workaround - set the primary
method to a dummy protocol that will immediately come back. In our
case, this is a blank nnml stream.

#+BEGIN_SRC emacs-lisp
(setq gnus-select-method '(nnml ""))
#+END_SRC

Also create an empty list for the secondary methods, because sometimes
the symbol is =nil=, which is awesome.

#+BEGIN_SRC emacs-lisp
  (setq gnus-secondary-select-methods '())
#+END_SRC

Default to topic mode on startup.

#+BEGIN_SRC emacs-lisp
(add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
#+END_SRC

Gnus creates a bunch of folders in your home directory that, as far as
I can tell, are not needed outside of gnus. I’ve finally managed to
wrangle enough variables to tell gnus to save everything in the gnus
folder. I save mine off in a version controlled “docs” directory.

#+BEGIN_SRC emacs-lisp
(setq gnus-home-directory (recker/path 'docs "emacs/gnus")
      nnfolder-directory (recker/path 'docs "emacs/gnus/Mail/archive")
      message-directory (recker/path 'docs "emacs/gnus/Mail")
      nndraft-directory (recker/path 'docs "emacs/gnus/Drafts")
      gnus-cache-directory (recker/path 'docs "emacs/gnus/cache"))
#+END_SRC

Change path to =newsrc= config file.

#+BEGIN_SRC emacs-lisp
(setq gnus-startup-file (recker/path 'docs "emacs/newsrc"))
#+END_SRC

Don't keep a dribble file.

#+BEGIN_SRC emacs-lisp
(setq gnus-use-dribble-file nil)
#+END_SRC

Enable the asynchronous flag, just in case it actually does something
one day.

#+BEGIN_SRC emacs-lisp
(setq gnus-asynchronous t)
#+END_SRC

*** Reading Mail

Add a personal IMAP account.

#+BEGIN_SRC emacs-lisp
(add-to-list 'gnus-secondary-select-methods
             '(nnimap "personal"
                      (nnimap-address "imap.gmail.com")
                      (nnimap-server-port "imaps")
                      (nnimap-stream ssl)
                      (nnmail-expiry-target "nnimap+gmail:[Gmail]/Trash")
                      (nnmail-expiry-wait immediate)))
#+END_SRC

*** Sending Mail

Don't attempt to archive outbound emails to groups.

#+BEGIN_SRC emacs-lisp
(setq gnus-message-archive-group nil)
#+END_SRC

Keep addresses locally using =bbdb=.

#+BEGIN_SRC emacs-lisp
(use-package bbdb
  :ensure t
  :config (setq bbdb-file (recker/path 'docs "emacs/bbdb.el"))
  :init
  (bbdb-mua-auto-update-init 'message)
  (setq bbdb-mua-auto-update-p 'query)
  (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus))
#+END_SRC

Use BBDB to store addresses.

#+BEGIN_SRC emacs-lisp
(use-package bbdb
  :ensure t
  :config (setq bbdb-file (recker/path 'docs "emacs/bbdb.el"))
  :init
  (bbdb-mua-auto-update-init 'message)
  (setq bbdb-mua-auto-update-p 'query)
  (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus))
#+END_SRC

SMTP settings.

#+BEGIN_SRC emacs-lisp
(setq smtpmail-smtp-service 587
      smtpmail-smtp-user "alex@reckerfamily.com"
      smtpmail-smtp-server "smtp.gmail.com"
      send-mail-function 'smtpmail-send-it)
#+END_SRC

* Functions

Load =cl= library to make elisp a little less painful.

#+BEGIN_SRC emacs-lisp
(require 'cl)
#+END_SRC

Install the requests package.

#+BEGIN_SRC emacs-lisp
(use-package request :ensure t)
#+END_SRC

Miscellaneous functions.

#+BEGIN_SRC emacs-lisp
(defun recker/purge-buffers ()
  "Delete all buffers, except for *scratch*."
  (interactive)
  (mapc #'(lambda (b) (unless (string= (buffer-name b) "*scratch*") (kill-buffer b))) (buffer-list)))

(defun recker/unfill-region (beg end)
  "Unfill the region, joining text paragraphs into a single logical line."
  (interactive "*r")
  (let ((fill-column (point-max)))
    (fill-region beg end)))

(defun recker/org-scratch ()
  "Open a org mode *scratch* pad."
  (interactive)
  (switch-to-buffer "*org scratch*")
  (org-mode)
  (insert "#+TITLE: Org Scratch\n\n"))

(defun recker/sudo (file-name)
  "find-file, as sudo."
  (interactive "Fsudo Find file:")
  (let ((tramp-file-name (concat "/sudo::" (expand-file-name file-name))))
    (find-file tramp-file-name)))

(defun recker/do-fancy-equal-thingy (beg end)
  (interactive "r")
  (align-regexp beg end "\\(\\s-*\\)\\ =" 1 0 t))

(defun recker/pass-to-string (entry)
  "Read an entry from `pass` as a string."
  (with-temp-buffer
    (password-store-copy entry)
    (progn (yank) (buffer-string))))

(defun recker/password-store-copy-work ()
  (interactive)
  (setenv "PASSWORD_STORE_DIR" (expand-file-name "~/.password-store-work"))
  (funcall-interactively #'password-store-copy (password-store--completing-read)))

(defun recker/password-store-copy ()
  (interactive)
  (setenv "PASSWORD_STORE_DIR" (expand-file-name "~/.password-store"))
  (funcall-interactively #'password-store-copy (password-store--completing-read)))

(defun recker/encrypt-with-ssh (public-key-path)
  (interactive "fPublic Key Path: ")
  (let* ((pem (shell-command-to-string (format "ssh-keygen -f %s -e -m PKCS8" public-key-path)))
	 (secret (read-passwd "Secret String: "))
	 (encrypt-command
	  (format "openssl rsautl -ssl -encrypt -pubin -inkey <(echo \"%s\") -ssl -in <(echo \"%s\") | base64" pem secret))
	 (hash (shell-command-to-string encrypt-command))
	 (decrypt-command
	  (format "echo \"%s\" | base64 -D | openssl rsautl -decrypt -inkey ~/.ssh/id_rsa" hash)))
    (kill-new decrypt-command nil)
    (message "Decrypt command added to kill ring.")))

(defun recker/send-list-at-point-to-wunderlist ()
  "Sends the org mode list at point to wunderlist.  Any item not
  already captured in wunderlist (by title) is added."
  (interactive)
  (setenv "PASSWORD_STORE_DIR" (expand-file-name "~/.password-store"))
  (let* ((these-items (if (member (first (org-element-at-point)) '(plain-list item))
			  (mapcar #'(lambda (i) (first i)) (cdr (org-list-to-lisp)))
			(error "pointer not on a list")))
	 (headers `(("Content-Type" . "application/json")
		    ("X-Access-Token" . ,(password-store-get "wundercron/client-secret"))
		    ("X-Client-ID" . ,(password-store-get "wundercron/client-id"))))
	 (url "https://a.wunderlist.com/api/v1")
	 (list-name "groceries")	;TODO: completing-read?
	 (list-obj (seq-find
		    #'(lambda (i) (string-equal list-name (cdr (assoc 'title i))))
		    (request-response-data
		     (request (concat url "/lists") :sync t :parser 'json-read :headers headers))))
	 (list-id (cdr (assoc 'id list-obj)))
	 (current-items (mapcar
			 #'(lambda (o) (cdr (assoc 'title o)))
			 (request-response-data
			  (request (concat url "/tasks")
				   :sync t :parser 'json-read :headers headers
				   :params `(("list_id" . ,list-id))))))
	 (new-items (or (remove-if #'(lambda (i) (member (format "%s" i) current-items)) these-items)
			(error "nothing to add!"))))
    (dolist (item new-items)
      (request (concat url "/tasks")
	       :parser 'json-read :headers headers :type "POST"
	       :data (json-encode-alist `(("list_id" . ,list-id)
					  ("title" . ,(format "%s" item))))))
    (message "Added to groceries: %s" new-items)))

(defun recker/docs-sync ()
  (interactive)
  (shell-command (format "git-sync -d %s" (recker/path 'docs)) nil nil))
#+END_SRC

Miscellaneous keybindings.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l") 'sort-lines)
  (global-set-key (kbd "C-c n") 'recker/org-scratch)
  (global-set-key (kbd "C-c r") 'replace-string)
  (global-set-key (kbd "C-c w") 'recker/send-list-at-point-to-wunderlist)
  (global-set-key (kbd "C-x P") 'recker/purge-buffers)
  (global-set-key (kbd "C-x p") 'password-store-copy)
  (global-set-key (kbd "C-x p") 'recker/password-store-copy)
  (global-set-key (kbd "C-x w") 'recker/password-store-copy-work)
  (global-set-key (kbd "C-x |") 'recker/do-fancy-equal-thingy)
#+END_SRC

* Local

Emacs sometimes dumps things in =init.el=.  It means well, but I would
rather this be in a different file ignored by git.

#+BEGIN_SRC emacs-lisp
(let ((custom (recker/path 'emacs "custom.el")))
  (unless (file-exists-p custom)
    (with-temp-buffer
      (write-file custom)))
  (setq custom-file custom))
#+END_SRC

I also like to keep a file around for miscellaneous elisp that should
run on startup.  This is for machine specific settings or things I am
still tinkering with.

#+BEGIN_SRC emacs-lisp
(let ((local (recker/path 'emacs "local.el")))
  (unless (file-exists-p local)
    (with-temp-buffer
      (insert ";; This file is for local changes")
      (write-file local)))
  (load local))
#+END_SRC
